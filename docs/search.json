[
  {
    "objectID": "posts/patchwork/index.html",
    "href": "posts/patchwork/index.html",
    "title": "Composing multiple plots with patchwork\n",
    "section": "",
    "text": "Setuplibrary(ggplot2)"
  },
  {
    "objectID": "posts/patchwork/index.html#patchwork",
    "href": "posts/patchwork/index.html#patchwork",
    "title": "Composing multiple plots with patchwork\n",
    "section": "patchwork",
    "text": "patchwork\nIt’s often useful to compose multiple plots together into a single image. There are ways of doing this in base R, e.g., by using par(mfrow=...), but i’ve always found this unintuitive and finicky. patchwork makes composing ggplots simple, while allowing for a high degree of customization. (The patchwork documentation is very good, and this post will borrow liberally from it, but it’s worth browsing for more details.) (For those looking for an alternative to patchwork, check out cowplot::plot_grid().)\nLet’s start with 4 simple plots, and look at various ways of composing them. (These plots are nicely arranged in a grid by Quarto for the purposes of this page if your browser window is big enough, but note that they are each a separate image.)\n\nCodep1 &lt;- ggplot(palmerpenguins::penguins) +\n  geom_point(aes(bill_length_mm, bill_depth_mm,\n                 color = species)) +\n  ggtitle(\"Plot 1\")\n\np2 &lt;- ggplot(palmerpenguins::penguins) +\n  geom_boxplot(aes(y = bill_length_mm, species,\n                 color = species)) +\n  ggtitle(\"Plot 2\")\n\np3 &lt;- ggplot(palmerpenguins::penguins) +\n  geom_point(aes(bill_length_mm, body_mass_g,\n                 color = species)) +\n  ggtitle(\"Plot 3\")\n\n\np4 &lt;- ggplot(palmerpenguins::penguins) +\n  geom_bar(aes(bill_length_mm, fill = species)) +\n  ggtitle(\"Plot 4\")\n\np1; p2; p3; p4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe simplest operation provided by patchwork is the + operator. Adding two plots together with + glues them together into a single image, side by side. You can do this with as many plots as you like–it will try to give a nice grid if possible. Note that all plots below are combined into a single image.\n\n\nTwo plots\nFour plots\n\n\n\n\nlibrary(patchwork)\np1 + p2\n\n\n\n\n\n\n\n\n\n\nlibrary(patchwork)\np1 + p2 + p3 + p4\n\n\n\n\n\n\n\n\n\n\nYou can specify the number of rows or columns in your composed plot with plot_layout(nrow=..., ncol=...). Setting byrow to false fills by column, rather than by row (so the left column below has plots 1, 2, and 3). (Click image to embiggen.)\n\np1 + p2 + p3 + p4 +\n  plot_layout(nrow = 3, byrow = FALSE)\n\n\n\n\n\n\n\nSee the section below on more complicated layouts and ?plot_layout for more options."
  },
  {
    "objectID": "posts/patchwork/index.html#packing-and-stacking-the-and-operators",
    "href": "posts/patchwork/index.html#packing-and-stacking-the-and-operators",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Packing and stacking (the | and / operators)",
    "text": "Packing and stacking (the | and / operators)\nComposing two plots with the | operator works a lot like the + operator above, except it ensures that the plots will end up side-by-side (“packed”) rather than one on top of the other. The / operator does the opposite—it ensures that plots are stacked.”\n\n\np1 | p2\np1 / p2\n\n\n\n\np1 | p2\n\n\n\n\n\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n\n\nParentheses can help to disambiguate possible layouts. (All of the operators work essentially like their arithmetic counterparts with respect to parentheses.) Without parentheses, as in the first tab below, the / operator takes precedence over the | operator:\n\n\np1 / p2 | p3\np1 / (p2 | p3)\n\n\n\n\np1 / p2 | p3\n\n\n\n\n\n\n\n\n\n\np1 / (p2 | p3)"
  },
  {
    "objectID": "posts/patchwork/index.html#annotating-the-composed-plot",
    "href": "posts/patchwork/index.html#annotating-the-composed-plot",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Annotating the composed plot",
    "text": "Annotating the composed plot\nplot_annotation() will annotate the combined, composed plot. The title and subtitle, arguments work as you would expect. The tag_levels argument lets you specify one of c('a', 'A', '1', 'i', 'I') for various sub-plot numbering:\n\n(p1 | (p2 / p3)) + \n  plot_annotation(title = 'Lots of data about penguins',\n    subtitle = 'There\\'s never too much info about penguins',\n    tag_levels = \"A\") &\n  theme(plot.title = element_text(hjust = .5, color = \"blue\"),\n        plot.tag = element_text(size = 20))\n\n\n\n\n\n\n\n(The & operator applies the theme specification to all subplots within the composed plot (and overall things like the main title/subtitle); the * operator applies the theme specifications to all subplots in the current nesting. level.)\nIf you want a theme element to apply only to the overall plot, and not the subplots, use the theme argument to plot_annotation() rather than & theme(...).\n\n(p1 | (p2 / p3)) + \n  plot_annotation(title = 'Lots of data about penguins',\n    subtitle = 'There\\'s never too much info about penguins', tag_levels = \"A\",\n    theme = theme(plot.title = element_text(hjust = .5, color = \"blue\"),\n        plot.tag = element_text(size = 20)))"
  },
  {
    "objectID": "posts/patchwork/index.html#more-complicated-layouts",
    "href": "posts/patchwork/index.html#more-complicated-layouts",
    "title": "Composing multiple plots with patchwork\n",
    "section": "More complicated layouts",
    "text": "More complicated layouts\nWe saw above that we can modify the layout with plot_layout(ncol = ...). You can also specify relative widths and heights for the rows and columns. For example, you can provide widths with a vector of n columns to specify each.\n\nSome plot theme changes for visibility in the following examplesp1 &lt;- p1 + theme(legend.position = \"none\", plot.background = element_rect(color = \"black\", linewidth = 2, fill = \"white\"))\np2 &lt;- p2 + theme(legend.position = \"none\", plot.background = element_rect(color = \"blue\", linewidth = 2, fill = \"white\"))\np3 &lt;- p3 + theme(legend.position = \"none\", plot.background = element_rect(color = \"green\", linewidth = 2, fill = \"white\"))\np4 &lt;- p4 + theme(legend.position = \"none\", plot.background = element_rect(color = \"red\", linewidth = 2, fill = \"white\"))\n\n\n\np1 + p2 + p3 + p4 + \n  plot_layout(widths = c(3, 1), heights = c(2, 1))\n\n\n\n\n\n\n\nYou can also specify quite complicated layouts with plot_layout(design = ...), in two formats. The simplest is to use a textual representation, as below. Letters represent plots (in the order in which they appear), with #s representing empty spaces. You must specify a perfect rectangular shape.\n\nlayout &lt;- \"\n##BBBB\nAACCDD\n##CCDD\n\"\np1 + p2 + p3 + p4 + \n  plot_layout(design = layout)\n\n\n\n\n\n\n\nUsing wrap_plots, you can specify which plot is represented by which letter, rather than letting that be handled automatically:\n\nlayout &lt;- '\nA#B\n#C#\nD#E\n'\nwrap_plots(D = p1, C = p2, B = p3, design = layout)\n\n\n\n\n\n\n\nThe alternative way to specify a layout is with one or more area()s, which take arguments for the top, left, bottom, and right bounds of a grid.1 The grid is specified in rows and columns, with row 1 column 1 being the top left, and numbers increasing as you go down and right. You can have plots overlap with this type of specification.\n\nlayout &lt;- c(\n  area(t = 2, l = 1, b = 5, r = 4), # This will be p1\n  area(t = 1, l = 3, b = 3, r = 5) # this will be p2\n)\np1 + p2 + \n  plot_layout(design = layout)\n\n\n\n\n\n\n\nInsets\nIt’s also possible to specify insets using inset_element(). Here, the position arguments should be relative to 1, with (0, 0) being bottom left and (1, 1) being top right. The align_to argument defaults to panel, but accepts values plot or full as well.\n\np1 + inset_element(p2, top = 1, right = 1, bottom = .5,\n                   left = .5, align_to = \"full\")"
  },
  {
    "objectID": "posts/patchwork/index.html#controlling-legends",
    "href": "posts/patchwork/index.html#controlling-legends",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Controlling legends",
    "text": "Controlling legends\n\nReset plots to their original themep1 &lt;- p1 + theme(legend.position = \"right\", plot.background = element_blank())\np2 &lt;- p2 + theme(legend.position = \"right\", plot.background = element_blank())\np3 &lt;- p3 + theme(legend.position = \"right\", plot.background = element_blank())\np4 &lt;- p4 + theme(legend.position = \"right\", plot.background = element_blank())\n\n\nplot_layout(guides = \"collect\") will collect all of the legends and put them in the same location. Legends that are identical between multiple subplots are collapsed, as with plots 1 and 3 below:\n\n\nguides = “collect”\nguides = “keep”\n\n\n\n\np1 + p2 + p3 + p4 + plot_layout(guides = \"collect\")\n\n\n\n\n\n\n\n\n\n\np1 + p2 + p3 + p4 + plot_layout(guides = \"keep\")\n\n\n\n\n\n\n\n\n\n\nYou can influence where the collected legends show up by including guide_area() in your layout specification:\n\nguide_area() + p1 + p2 + p3 + plot_layout(guides = \"collect\")"
  },
  {
    "objectID": "posts/patchwork/index.html#nesting",
    "href": "posts/patchwork/index.html#nesting",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Nesting",
    "text": "Nesting\n\nSome plot theme changes for visibility in the following examplesp1 &lt;- p1 + theme(legend.position = \"none\", plot.background = element_rect(color = \"black\", linewidth = 2, fill = \"white\"))\np2 &lt;- p2 + theme(legend.position = \"none\", plot.background = element_rect(color = \"blue\", linewidth = 2, fill = \"white\"))\np3 &lt;- p3 + theme(legend.position = \"none\", plot.background = element_rect(color = \"green\", linewidth = 2, fill = \"white\"))\np4 &lt;- p4 + theme(legend.position = \"none\", plot.background = element_rect(color = \"red\", linewidth = 2, fill = \"white\"))\n\n\nPlots can be nested at multiple levels. Compare the following plots: in the first we use wrap_plots() to combine p1 and p2 into a single unit (which is then added to plot 3); in the second we don’t do any nesting.\n\n\nNesting p1 and p2\nNo nesting\n\n\n\n\nwrap_plots(p1 + p2) + p3\n\n\n\n\n\n\n\n\n\n\n(p1 + p2) + p3 # Parens are vacuous here\n\n\n\n\n\n\n\n\n\n\nIf you don’t use wrap_plots(), the nesting behavior with + is a little unintuitive. With a single plot on the left of + and a composite plot on the right, you get the expected nesting, with the composite plot taking up half of the whole plot:\n\ncomposite &lt;- p1 + p2\np3 + composite\n\n\n\n\n\n\n\nSo far, so good. But, what if we change the order of arguments around +? All of a sudden, the plot is divided into 3 equal panels!\n\ncomposite + p3\n\n\n\n\n\n\n\nSo, + will nest a composite on the right, but will not nest a composite on the left. You can force the reverse of this by using the - operator, which keeps its arguments at the same nesting level—but I personally find the wrap_plots() syntax more intuitive.\n\n\ncomposite - p3\np3 - composite\n\n\n\n\ncomposite - p3\n\n\n\n\n\n\n\n\n\n\np3 - composite"
  },
  {
    "objectID": "posts/patchwork/index.html#alignment-across-multiple-slides",
    "href": "posts/patchwork/index.html#alignment-across-multiple-slides",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Alignment across multiple slides",
    "text": "Alignment across multiple slides\n\nSome plot theme changes for visibility in the following examplesp1 &lt;- p1 + theme(legend.position = \"top\", plot.background = element_blank())\np2 &lt;- p2 + theme(legend.position = \"right\", plot.background = element_blank())\np3 &lt;- p3 + theme(legend.position = \"bottom\", plot.background = element_blank())\np4 &lt;- p4 + theme(legend.position = \"left\", plot.background = element_blank())\n\n\nWhen including plots in a slideshow, you often get an annoying jerking sensation as you move from one slide to the next:\n\n\n\n\n\n\n\n\nYou can generate aligned plots align_patches. Notice here how the axis labels are aligned with each other across multiple slides.\n\nplots_aligned &lt;- align_patches(p1, p2, p3, p4)\nfor (p in plots_aligned) {\n  plot(p)\n}\n\n\n\n\n\n\n\nSee the relevant documentation for more details.\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n            gifski      1.12.0-1 2023-06-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n         patchwork         1.1.2 2022-08-19 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "hidden.html",
    "href": "hidden.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "This is a collection of R packages, bits of code, and other trivia that I find useful. It was originally written for myself, but hopefully others will find some useful tidbits.\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nCategories\n\n\nModified\n\n\n\n\n\n\nFigure stuff\n\n\nhidden\n\n\n7/8/23\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/thinkr_peep/index.html",
    "href": "posts/thinkr_peep/index.html",
    "title": "thinkr::peep(): See intermediate stages of piped dfs",
    "section": "",
    "text": "Setup\nlibrary(tidyverse)\nlibrary(thinkr)\nInsert thinkr::peep(head) into a df pipeline to print a few rows at a particular intermediate stage in the pipeline. Here it prints a few lines of the df before it gets summarized:\npalmerpenguins::penguins |&gt; \n  peep(head) |&gt;\n1  group_by(species) |&gt;\n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\n\n1\n\nHow convenient that the base R pipe looks like a penguin.\n\n\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081\nYou can use multiple functions, like head and tail to see two views of the intermediate step; verbose = TRUE prints the functions used for these peeps:\npalmerpenguins::penguins |&gt;\n  peep(head, tail, verbose = TRUE) |&gt; \n  group_by(species) |&gt; \n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\nhead(.)\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\ntail(.)\n\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081\nAnd you can include arguments to functions inside peep() with dot syntax if you’re using the magrittr pipe %&gt;% (at least for the line directly above the peep):1\npalmerpenguins::penguins %&gt;% \n  peep(head(n = 7, x = .)) |&gt; \n  group_by(species) |&gt; \n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\n# A tibble: 7 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n7 Adelie  Torgersen           38.9          17.8               181        3625\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081"
  },
  {
    "objectID": "posts/skimr/index.html",
    "href": "posts/skimr/index.html",
    "title": "Summary statistics for dfs with skimr\n",
    "section": "",
    "text": "Setuplibrary(dplyr)\n\n\nskimr::skim() provides handy summary statistics for dfs and related objects, including little sparkline-style histograms right in the output.\n\nlibrary(skimr)\n\npalmerpenguins::penguins |&gt; \n  skim()\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n  numeric                  5                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean      sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46    32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97    13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1    172    190    197  \n4 body_mass_g               2         0.994 4202.  802.    2700   3550   4050  \n5 year                      0         1     2008.    0.818 2007   2007   2008  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n5 2009   2009   ▇▁▇▁▇\n\n\nIt also handles grouped data nicely:\n\npalmerpenguins::penguins |&gt; \n  group_by(species) |&gt; \n  skim()\n\n\n\n── Data Summary ────────────────────────\n                           Values                      \nName                       group_by(palmerpenguins::...\nNumber of rows             344                         \nNumber of columns          8                           \n_______________________                                \nColumn type frequency:                                 \n  factor                   2                           \n  numeric                  5                           \n________________________                               \nGroup variables            species                     \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable species   n_missing complete_rate ordered n_unique\n1 island        Adelie            0         1     FALSE          3\n2 island        Chinstrap         0         1     FALSE          1\n3 island        Gentoo            0         1     FALSE          1\n4 sex           Adelie            6         0.961 FALSE          2\n5 sex           Chinstrap         0         1     FALSE          2\n6 sex           Gentoo            5         0.960 FALSE          2\n  top_counts               \n1 Dre: 56, Tor: 52, Bis: 44\n2 Dre: 68, Bis: 0, Tor: 0  \n3 Bis: 124, Dre: 0, Tor: 0 \n4 fem: 73, mal: 73         \n5 fem: 34, mal: 34         \n6 mal: 61, fem: 58         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     species   n_missing complete_rate   mean      sd     p0\n 1 bill_length_mm    Adelie            1         0.993   38.8   2.66    32.1\n 2 bill_length_mm    Chinstrap         0         1       48.8   3.34    40.9\n 3 bill_length_mm    Gentoo            1         0.992   47.5   3.08    40.9\n 4 bill_depth_mm     Adelie            1         0.993   18.3   1.22    15.5\n 5 bill_depth_mm     Chinstrap         0         1       18.4   1.14    16.4\n 6 bill_depth_mm     Gentoo            1         0.992   15.0   0.981   13.1\n 7 flipper_length_mm Adelie            1         0.993  190.    6.54   172  \n 8 flipper_length_mm Chinstrap         0         1      196.    7.13   178  \n 9 flipper_length_mm Gentoo            1         0.992  217.    6.48   203  \n10 body_mass_g       Adelie            1         0.993 3701.  459.    2850  \n11 body_mass_g       Chinstrap         0         1     3733.  384.    2700  \n12 body_mass_g       Gentoo            1         0.992 5076.  504.    3950  \n13 year              Adelie            0         1     2008.    0.822 2007  \n14 year              Chinstrap         0         1     2008.    0.863 2007  \n15 year              Gentoo            0         1     2008.    0.792 2007  \n      p25    p50    p75   p100 hist \n 1   36.8   38.8   40.8   46   ▁▆▇▆▁\n 2   46.3   49.6   51.1   58   ▂▇▇▅▁\n 3   45.3   47.3   49.6   59.6 ▃▇▆▁▁\n 4   17.5   18.4   19     21.5 ▂▆▇▃▁\n 5   17.5   18.4   19.4   20.8 ▅▇▇▆▂\n 6   14.2   15     15.7   17.3 ▅▇▇▆▂\n 7  186    190    195    210   ▁▆▇▅▁\n 8  191    196    201    212   ▁▅▇▅▂\n 9  212    216    221    231   ▂▇▇▆▃\n10 3350   3700   4000   4775   ▅▇▇▃▂\n11 3488.  3700   3950   4800   ▁▅▇▃▁\n12 4700   5000   5500   6300   ▃▇▇▇▂\n13 2007   2008   2009   2009   ▇▁▇▁▇\n14 2007   2008   2009   2009   ▇▁▆▁▇\n15 2007   2008   2009   2009   ▆▁▇▁▇\n\n\nAnd finally, since the output of skim() has class data.frame, you can include it in a pipeline, e.g. to filter by one of the summary statistics:\n\npalmerpenguins::penguins |&gt; \n  skim() |&gt; \n  filter(numeric.sd &gt; 1)\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  numeric                  4                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean     sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46   32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97   13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1   172    190    197  \n4 body_mass_g               2         0.994 4202.  802.   2700   3550   4050  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n\n\n\npalmerpenguins::penguins |&gt; \n  skim() |&gt; \n  filter(factor.n_unique &gt; 1)\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n\n\n\nTo refer to the summary statistic columns, be sure to preface the column name with the variable type, e.g. factor. or numeric. as appropriate. For a list of variable types and the default summary statistics for each:\n\nget_default_skimmer_names()\n\n$AsIs\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$character\n[1] \"min\"        \"max\"        \"empty\"      \"n_unique\"   \"whitespace\"\n\n$complex\n[1] \"mean\"\n\n$Date\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$difftime\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$factor\n[1] \"ordered\"    \"n_unique\"   \"top_counts\"\n\n$haven_labelled\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$list\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$logical\n[1] \"mean\"  \"count\"\n\n$numeric\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$POSIXct\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$Timespan\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$ts\n [1] \"start\"      \"end\"        \"frequency\"  \"deltat\"     \"mean\"      \n [6] \"sd\"         \"min\"        \"max\"        \"median\"     \"line_graph\"\n\n\nFinally, if you want to print the summary, but return the original df, use skim_tee().\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n         base64enc         0.1-3 2015-07-28 CRAN (R 4.3.0)\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul           1.3 2022-09-03 CRAN (R 4.3.1)\n              curl         5.0.0 2023-01-12 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n              repr         1.1.6 2023-01-26 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n             skimr         2.1.5 2022-12-23 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/figure_working/index.html",
    "href": "posts/figure_working/index.html",
    "title": "Figure stuff",
    "section": "",
    "text": "Setuplibrary(tidyverse)\n\ntheme_set(asbutils::theme_asb())\n\n\n\n\nmpg |&gt; \nggplot(aes(x = cty, y = hwy, color = manufacturer)) +\n  geom_point()\n\n\n\n\n\n\n\n\nmpg |&gt; \nggplot(aes(x = cty, y = -hwy, color = manufacturer)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html",
    "href": "posts/fuzzyjoin/index.html",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "",
    "text": "Setup\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-string-distance",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-string-distance",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by string distance",
    "text": "Join dfs by string distance\nSometimes you want to join dfs on fuzzy criteria. That’s where fuzzyjoin comes in. Consider this example lifted partially from the documentation:\nSet up a df with some typos. We’ll join this to ggplot2::diamonds by cut, which has levels: Fair, Good, Very Good, Premium, Ideal.\n\n# Create a dataframe with some typos\nd &lt;- data.frame(approximate_name = c(\"Idea\", \"Premiums\", \"Premioom\",\n                                     \"VeryGood\", \"VeryGood\", \"Faiir\"),\n                type = 1:6)\n\nA regular inner join finds no matches, due to the typos:\n\ninner_join(diamonds, d, by = c(cut = \"approximate_name\")) |&gt; \n  nrow()\n\n[1] 0\n\n\nstringdist_inner_join() however will match strings based on any of the methods available in the stringdist package (e.g. Levenshtein distance, Jaccard distance, etc).\n\nfuzzyjoin::stringdist_inner_join(diamonds, d,\n                                 by = c(cut = \"approximate_name\"),\n1                                 method = \"lv\",\n                                 max_dist = 3,\n                                 distance_col = \"distance\") |&gt; \n2  relocate(approximate_name, .after = \"cut\") |&gt;\n  head(10)\n\n\n1\n\nLevenshtein distance\n\n2\n\nMove these columns closer together for easier visual comparison\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\napproximate_name\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\ntype\ndistance\n\n\n\n\n0.23\nIdeal\nIdea\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n1\n1\n\n\n0.21\nPremium\nPremiums\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n2\n1\n\n\n0.21\nPremium\nPremioom\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n3\n2\n\n\n0.29\nPremium\nPremiums\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n2\n1\n\n\n0.29\nPremium\nPremioom\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n3\n2\n\n\n0.24\nVery Good\nVeryGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n4\n1\n\n\n0.24\nVery Good\nVeryGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n5\n1\n\n\n0.24\nVery Good\nVeryGood\nI\nVVS1\n62.3\n57\n336\n3.95\n3.98\n2.47\n4\n1\n\n\n0.24\nVery Good\nVeryGood\nI\nVVS1\n62.3\n57\n336\n3.95\n3.98\n2.47\n5\n1\n\n\n0.26\nVery Good\nVeryGood\nH\nSI1\n61.9\n55\n337\n4.07\n4.11\n2.53\n4\n1"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-regex-matches",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-regex-matches",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by regex matches",
    "text": "Join dfs by regex matches\nAlso extremely useful are the regex_*_join functions, which join based on whether there is a regex match between columns. (This example also from the documentation)\n\nd &lt;- data.frame(regex_name = c(\"^Idea\", \"mium\", \"Good\"), type = 1:3)\n\nfuzzyjoin::regex_inner_join(diamonds, d, by = c(cut = \"regex_name\")) |&gt; \n  relocate(regex_name, .after = cut) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\nregex_name\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\ntype\n\n\n\n\n0.23\nIdeal\n^Idea\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n1\n\n\n0.21\nPremium\nmium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n2\n\n\n0.23\nGood\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n3\n\n\n0.29\nPremium\nmium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n2\n\n\n0.31\nGood\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n3\n\n\n0.24\nVery Good\nGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n3"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-absolute-difference-between-columns",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-absolute-difference-between-columns",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by absolute difference between columns",
    "text": "Join dfs by absolute difference between columns\nSay you want to join by two columns so long as they are equal within a certain degree of tolerance. Here we join so long as sepal_lengths$Sepal.Length is within 0.5 of the iris$Sepal.Length:\n\nsepal_lengths &lt;- data.frame(Sepal.Length = c(5, 6, 7), Type = 1:3)\n\nfuzzyjoin::difference_inner_join(iris, sepal_lengths,\n                                 max_dist = 0.5,\n                                 distance_col = \"distance\") |&gt; \n  relocate(Sepal.Length.x, .after = Sepal.Length.y) |&gt; \n  head()\n\nJoining by: \"Sepal.Length\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\nSepal.Length.y\nSepal.Length.x\nType\ndistance\n\n\n\n\n3.5\n1.4\n0.2\nsetosa\n5\n5.1\n1\n0.1\n\n\n3.0\n1.4\n0.2\nsetosa\n5\n4.9\n1\n0.1\n\n\n3.2\n1.3\n0.2\nsetosa\n5\n4.7\n1\n0.3\n\n\n3.1\n1.5\n0.2\nsetosa\n5\n4.6\n1\n0.4\n\n\n3.6\n1.4\n0.2\nsetosa\n5\n5.0\n1\n0.0\n\n\n3.9\n1.7\n0.4\nsetosa\n5\n5.4\n1\n0.4\n\n\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul           1.3 2022-09-03 CRAN (R 4.3.1)\n              curl         5.0.0 2023-01-12 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n         fuzzyjoin         0.1.6 2020-05-15 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n        stringdist        0.9.10 2022-11-07 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.4.0 2022-03-28 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/gghighlight/index.html",
    "href": "posts/gghighlight/index.html",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "",
    "text": "Setuplibrary(tidyverse)"
  },
  {
    "objectID": "posts/gghighlight/index.html#the-problem",
    "href": "posts/gghighlight/index.html#the-problem",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "The problem",
    "text": "The problem\nWe often want to make a subset of data stand out from the rest, but doing so manually is a bit tedious. You could, for example, add a logical column to the data highlight, and set a plot aesthetic to make 1s in a bright color and 0s in grey.\nBut gghighlight automates this process for ggplot2 plots. Let’s look at the life expectancy dataset from gapminder. Even when color-coding by continent, it’s very difficult to pick out individual countries. We can use gghighlight, though, to emphasize countries with the top 10 highest populations:\n\nCodelibrary(gghighlight)\n\nbase_plot &lt;- gapminder::gapminder |&gt; \n  ggplot(aes(x = year, y = lifeExp, color = continent)) +\n  geom_line(aes(group = country))\n\npretty_plot &lt;- base_plot +\n  scale_x_continuous(expand = expansion(mult = c(0,0.25))) +\n  geom_line(aes(group = country)) +\n  gghighlight(max(pop), max_highlight = 10,\n              unhighlighted_params = list(alpha = 0.25,\n                                          color = NULL\n              ),\n              line_label_type = \"ggrepel_text\",\n              label_params = list(\n                                  hjust = 0,\n                                  direction = \"y\",\n                                  nudge_x = 10,\n                                  segment.size = 0.2\n              ))\n\nbase_plot\npretty_plot\n\n\n\n\nVanilla ggplot: Too busy to glean any insights\n\n\n\nCountries with the top 10 highest populations gghighlighted"
  },
  {
    "objectID": "posts/gghighlight/index.html#gghighlight-basics",
    "href": "posts/gghighlight/index.html#gghighlight-basics",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "\ngghighlight basics",
    "text": "gghighlight basics\nLet’s start with the busy plot from above, which we’ve saved as base_plot. The gghighlight() function can be added to any ggplot, and requires only a predicate to select the highlighted portion of the data (passed directly to dplyr::filter(), so anything you can do there is fair game). Here we highlight countries with a population greater than 50 million.1\n\nbase_plot +\n  gghighlight(pop &gt; 50000000)\n\n\n\n\n\n\n\nSince there are so many un-highlighted lines, it’s quite hard to see what’s happening. We can change the aesthetics of the un-highlighted lines with unhighlighted_params.\n\nbase_plot +\n  gghighlight(pop &gt; 50000000,\n              unhighlighted_params = list(alpha = 0.25))"
  },
  {
    "objectID": "posts/gghighlight/index.html#more-complicated-filtering-criteria",
    "href": "posts/gghighlight/index.html#more-complicated-filtering-criteria",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "More complicated filtering criteria",
    "text": "More complicated filtering criteria\nSince the first argument(s) of gghighlight get passed directly to filter, you can include multiple filtering criteria, like population over 50 million and only countries in Asia:\n\nbase_plot +\n  gghighlight(pop &gt; 50000000, continent == \"Asia\",\n              unhighlighted_params = list(alpha = 0.25))\n\n\n\n\n\n\n\n(Note that in this plot, where we have relatively few highlighted lines, gghighlight adds labels for us.)\nWe can also provide a non-logical predicate to filter by, for example the top ten countries by population. The predicate is used to order the results, and the max_highlight argument determines the top n rows/groups based on that criterion:\n\nbase_plot +\n  gghighlight(max(pop), max_highlight = 10,\n              unhighlighted_params = list(alpha = 0.25))"
  },
  {
    "objectID": "posts/gghighlight/index.html#labels",
    "href": "posts/gghighlight/index.html#labels",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "Labels",
    "text": "Labels\nThe labels in the previous plot make things pretty crowded. gghighlight uses the ggrepel::geom_label_repel geom by default, and arguments can be passed to that function with the label_params argument.2 Here we’ll modify max.overlaps, which removes some labels when there are too many overlapping objects:\n\nbase_plot +\n  gghighlight(max(pop), max_highlight = 10,\n              unhighlighted_params = list(alpha = 0.25),\n              label_params = list(\n                max.overlaps = 5\n              ))\n\n\n\n\n\n\n\nWhat if we want to have all of the labels off on one side, rather than on top of the plotted data? We can once again avail ourselves of label_params. I also prefer the labels to be text only—no border—which is accomplished with line_label_type = \"ggrepel_text\".\n\nbase_plot +\n  gghighlight(max(pop), max_highlight = 10,\n    unhighlighted_params = list(alpha = 0.25),\n    line_label_type = \"ggrepel_text\",\n    label_params = list(\n      hjust = 0, # align label text\n      direction = \"y\", # allow shifting labels on y axis to make room\n      nudge_x = 10, # push everything further to the right\n      segment.size = 0.2 # make pointing lines thinner\n    )\n  )\n\n\n\n\n\n\n\nOne final tweak is to expand the plot rightward, so there is more room for labels. This is done by modifying the scale of the plot, as below. (I have not found a good way to make the labels appear in the margin)\n\nbase_plot +\n # Modify scale:\n  scale_x_continuous(expand = expansion(mult = c(0,0.25))) +\n  gghighlight(max(pop), max_highlight = 10,\n    unhighlighted_params = list(alpha = 0.25),\n    line_label_type = \"ggrepel_text\",\n    label_params = list(\n      hjust = 0, # align label text\n      direction = \"y\", # allow shifting labels on y axis to make room\n      nudge_x = 10, # push everything further to the right\n      segment.size = 0.2 # make pointing lines thinner\n    )\n  )\n\n\n\n\n\n\n\nYou’ll notice that in the plot above, the labels are drawn inside the plotting area, and not in the margin. I have not found a good way to make the labels in the margin only. The closest built-in option to gghighlight is to set line_label_type = \"sec_axis\" instead of \"ggrepel_text\", but this does not prevent the labels from overlapping each other (since it’s not using ggrepel anymore). This is ok in a plot with only a few—or very spaced out—labels, but doesn’t work well for our current plot. You can see in the second plot below that it looks pretty good when we select, say, only the top 3 countries by population.\n\nbase_plot +\n  gghighlight(max(pop), max_highlight = 10,\n    unhighlighted_params = list(alpha = 0.25),\n    line_label_type = \"sec_axis\"\n    )\nbase_plot +\n  gghighlight(max(pop), max_highlight = 3, # ***\n    unhighlighted_params = list(alpha = 0.25),\n    line_label_type = \"sec_axis\"\n    )"
  },
  {
    "objectID": "posts/gghighlight/index.html#other-geoms",
    "href": "posts/gghighlight/index.html#other-geoms",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "Other geoms",
    "text": "Other geoms\ngghighlight works on geoms other than line, and in fact looks pretty snazzy in barplots/histograms plotted by group, where there is a lot of overlap. In the highlighted plot we facet by continent, but also show the overall distribution in gray.\n\n\nHighlighting\nNo highlighting\n\n\n\n\ngapminder::gapminder |&gt; \n  ggplot(aes(x = lifeExp, fill = continent)) +\n  geom_histogram() +\n  facet_wrap(~continent) +\n  gghighlight()\n\n\n\n\n\n\n\n\n\n\ngapminder::gapminder |&gt; \n  ggplot(aes(x = lifeExp, fill = continent)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\nAnd with geom_point, for example, we can call out the top ten countries by population in the data from 2002:\n\ngapminder::gapminder |&gt; \n  filter(year == 2002) |&gt; \n  ggplot(aes(x = lifeExp, y = pop, color = country)) +\n  geom_point(group = 1) +\n  gghighlight(max(pop), max_highlight = 10,\n              label_key = country,\n              label_params = list(\n                max.overlaps = 1\n              ))\n\nWarning: ggrepel: 6 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nNote above that we’re warned that there were “too many overlaps,” and therefore some labels are omitted. In fact, if there are too many overlapping data points, all labels will be omitted You can remedy this by either having fewer highlighted points and/or changing max.overlaps.\n\ngapminder::gapminder |&gt; \n  filter(year == 2002) |&gt; \n  ggplot(aes(x = lifeExp, y = pop, color = country)) +\n  geom_point(group = 1) +\n  gghighlight(max(pop), max_highlight = 5,\n              label_key = country,\n              label_params = list(\n                max.overlaps = 50\n              ))\n\n\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n         gapminder         1.0.0 2023-03-10 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n       gghighlight         0.4.0 2022-10-16 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n           ggrepel         0.9.3 2023-02-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2023-06-29 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.3.0 2023-05-12 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/gghighlight/index.html#footnotes",
    "href": "posts/gghighlight/index.html#footnotes",
    "title": "Spotlight subsets of data in your plots with gghighlight\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nNB: unless you set use_direct_label = FALSE, the legend will not be included in a highlighted plot. Also, if you want the colors to match an unhighlighted version of the plot, use keep_scales = TRUE.↩︎\nSee the geom_label_repel documentation for more options.↩︎"
  },
  {
    "objectID": "posts/ggiraph/index.html",
    "href": "posts/ggiraph/index.html",
    "title": "Interactive plots with ggiraph\n",
    "section": "",
    "text": "ggiraph allows for the creation of interactive plots in documents that will output as HTML or in Shiny. In static HTML pages, ggiraph allows for tooltips, mouseover highlighting, and JavaScript on click. In Shiny documents there is additional interactivity available—but since this document is static HTML, I won’t cover these here.\n(For more details, see the ggiraph overview, and for even more details, see the ggiraph book; some examples here come from those sources.)\n(You may also be interested in the plotly package as another option for adding interactivity to plots.)"
  },
  {
    "objectID": "posts/ggiraph/index.html#ggiraph",
    "href": "posts/ggiraph/index.html#ggiraph",
    "title": "Interactive plots with ggiraph\n",
    "section": "",
    "text": "ggiraph allows for the creation of interactive plots in documents that will output as HTML or in Shiny. In static HTML pages, ggiraph allows for tooltips, mouseover highlighting, and JavaScript on click. In Shiny documents there is additional interactivity available—but since this document is static HTML, I won’t cover these here.\n(For more details, see the ggiraph overview, and for even more details, see the ggiraph book; some examples here come from those sources.)\n(You may also be interested in the plotly package as another option for adding interactivity to plots.)"
  },
  {
    "objectID": "posts/ggiraph/index.html#simple-example",
    "href": "posts/ggiraph/index.html#simple-example",
    "title": "Interactive plots with ggiraph\n",
    "section": "Simple example",
    "text": "Simple example\nAs a simple example, here is a plot of the palmerpenguins dataset, showing bill_depth_mm vs. bill_length_mm; species are shown by color, and hovering over a point shows which island the sample was collected on (and highlights all other points from that island):\n\nlibrary(ggiraph)\nlibrary(ggplot2)\nlibrary(palmerpenguins) # Load penguins dataset\n\nplot_1 &lt;- penguins |&gt; \n  ggplot(\n  aes(\n    x = bill_depth_mm, y = bill_length_mm,\n    tooltip = paste(\"Island:\", island),\n    data_id = island, color = species\n    )) +\n  geom_point_interactive(\n     hover_nearest = TRUE\n  )\n\ngirafe(ggobj = plot_1)\n\n\n\n\n\nThe data_id argument is how items will be grouped for tooltips and hover effects—here, we want all the dots from the same island to behave together.\nNote, too, the ggobj argument to girafe(). The actual first argument to girafe() is not a ggplot object; this means the ggobj argument needs to be called explicitly, and also makes piping into girafe a bit annoying (hence saving the plot to plot_1 and referring to that within the girafe() call."
  },
  {
    "objectID": "posts/ggiraph/index.html#slightly-more-complicated-example",
    "href": "posts/ggiraph/index.html#slightly-more-complicated-example",
    "title": "Interactive plots with ggiraph\n",
    "section": "Slightly more complicated example",
    "text": "Slightly more complicated example\nIn this slightly more complicated example, the weight of chicks is shown over time. Hovering over a line highlights all chicks in that diet (and dims those in other diets)1, and shows the chick number in a tooltip.\nThe styling of moused-over elements is controlled with the css argument to opts_hover (which is called inside girafe()). I like making non-moused-over elements gray (in opts_hover_inv) and leaving the moused-over elements with their original color by specifiying `css=““.\n\nplot_2 &lt;- ChickWeight |&gt;\n  ggplot(\n  aes(\n    x = Time, y = weight, color = Diet,\n    group = Chick,\n    tooltip = paste0(\"Diet \", Diet, \" (Chick \", Chick, \")\"),\n    data_id = Diet\n    )) +\n  geom_line_interactive(\n     hover_nearest = TRUE\n  )\n\ngirafe(ggobj = plot_2,\n      options = list(\n        opts_hover(css = \"\"), # Don't change CSS for selected group\n        opts_hover_inv(css = \"opacity: 0.1\"), # CSS for other groups\n        opts_toolbar(saveaspng = FALSE) # Don't include save button\n      ))"
  },
  {
    "objectID": "posts/ggiraph/index.html#javascript-on-click",
    "href": "posts/ggiraph/index.html#javascript-on-click",
    "title": "Interactive plots with ggiraph\n",
    "section": "Javascript on click",
    "text": "Javascript on click\nThe onclick aesthetic allows for execution of JavaScript on click. This is probably more useful in a Shiny project, but it does work even on static HTML pages. Here we get an alert when we click:\n\nplot_3 &lt;- penguins |&gt; \n  ggplot(aes(x = species, fill = island,\n             tooltip = sprintf('Island: %s | Species: %s', island, species),\n             data_id = island,\n             onclick = sprintf('alert(\"Island: %s | Species: %s\");', island, species)\n             )\n         ) +\n  geom_bar_interactive()\n\ngirafe(ggobj = plot_3,\n       options = list(\n         opts_hover(css = \"\"), # Don't change CSS for selected group\n         opts_hover_inv(css = \"fill: gray\"), # CSS for non-selected groups\n         opts_toolbar(saveaspng = FALSE) # Don't include save button\n       )\n)\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggiraph         0.8.7 2023-03-17 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n              uuid         1.1-0 2022-04-19 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/ggiraph/index.html#footnotes",
    "href": "posts/ggiraph/index.html#footnotes",
    "title": "Interactive plots with ggiraph\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nFor similar functionality in static graphs (i.e., highlighting one particular group), the gghighlight package.↩︎"
  },
  {
    "objectID": "posts/paginate_faceted_graphs/index.html",
    "href": "posts/paginate_faceted_graphs/index.html",
    "title": "Paginate a faceted graph and save as a single multi-page PDF",
    "section": "",
    "text": "When you have a plot with just a few facets, it’s easy to fit them all on a single page. But what if you have a whole bunch of facets that you want to visualize? For example, the USArrests dataset has data from all 50 US states.\nIf we just use the usual facet_wrap or facet_grid from ggplot2, you end up with one massive, smooshed-together image:\nlibrary(tidyverse)\n\nplot_1 &lt;- USArrests |&gt;  # dataset on US arrests\n  rownames_to_column(\"State\") |&gt;   # This is just so we can see the state names\n  ggplot(aes(x = UrbanPop, y = Murder)) +\n  geom_point()  +\n  facet_wrap(~ State,\n             nrow = 5, ncol = 10)\n\nplot_1\nThe ggforce library, among its many useful functions, includes facet_wrap_paginate and facet_grid_paginate. These work like facet_wrap and facet_grid, but take an additional page argument. Here we specify that we want 4 rows and 5 columns per page, so for 50 states there will be 2 full pages plus one page with the remaining 10 states:\nlibrary(ggforce)\n\nplot_2 &lt;- plot_1  +\n  facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = 2)\n\nplot_2\nNote that we had to specify which page we wanted to print. We can then easily put this into a loop to generate all the necessary pages. The helpful n_pages() will count the pages needed, which we can then use in a loop. This gives us 3 separate plots.\nplot_pages &lt;- plot_2 |&gt; \n  n_pages()\n\nfor (i in 1:plot_pages) {\n  print(\n    plot_1 + facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = i)\n  )  \n}\nThat’s better, but for inclusion in a longer document or for sharing the plot, you may want all three pages in a single PDF. This can be accomplished by calling pdf() before the loop and dev.off() after.1\npdf('many_plots.pdf', width = 11, height = 8.5) #start building pdf\n  for (i in 1:plot_pages) {\n    print( # don't forget this\n      plot_1 +\n      facet_wrap_paginate(~State, nrow = 4, ncol = 5, page = i)\n    )\n  }\ndev.off() # end building pdf\nThe resulting PDF is a single file with 3 pages, as we expect.\n(This post was inspired by this conversation on StackOverflow.)"
  },
  {
    "objectID": "posts/paginate_faceted_graphs/index.html#footnotes",
    "href": "posts/paginate_faceted_graphs/index.html#footnotes",
    "title": "Paginate a faceted graph and save as a single multi-page PDF",
    "section": "Footnotes",
    "text": "Footnotes\n\nIn the past I’ve had issues with getting pdf() to work, especially if I use any fancy fonts in the ggplot theme. If you run into issues, you can replace pdf() with cairo_pdf(..., onefile = TRUE), which seems to work even with exotic fonts.↩︎"
  },
  {
    "objectID": "posts/janitor/index.html",
    "href": "posts/janitor/index.html",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "",
    "text": "Setup\nlibrary(janitor)\njanitor contains various tools for examining and cleaning dirty data."
  },
  {
    "objectID": "posts/janitor/index.html#cleaning-dirty-data",
    "href": "posts/janitor/index.html#cleaning-dirty-data",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Cleaning dirty data",
    "text": "Cleaning dirty data\n\nClean column names\nLet’s create a df with some poorly-chosen column names:\n\ntest_df &lt;- as.data.frame(matrix(ncol = 6))\nnames(test_df) &lt;- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n\nclean_names() does just as the name implies:\n\ntest_df |&gt; \n  clean_names()\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_name\nabc\npercent_successful_2009\nrepeat_value\nrepeat_value_2\nx\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nThe case argument to clean_names() specifies what case you’d like output names to be in. You can specify any case style that’s available in snakecase::to_any_case(), including “screaming_snake” if you want to be perverse:\n\ntest_df |&gt; \n  clean_names(case = \"screaming_snake\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nFIRST_NAME\nABC\nPERCENT_SUCCESSFUL_2009\nREPEAT_VALUE\nREPEAT_VALUE_2\nX\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nCheck if dfs are row-bind-able\nAlso useful is compare_df_cols which summarizes whether the specified dfs can be row-bound (i.e., have columns of the same names/types):\n\ndf1 &lt;- data.frame(A= 1:2, b = c(\"big\", \"small\"))\ndf2 &lt;- data.frame(a = 10:12, b = c(\"medium\", \"small\", \"big\"), c = 0, stringsAsFactors = TRUE) # here, column b is a factor\ndf3 &lt;- df1 |&gt; \n  dplyr::mutate(b = as.character(b))\n\ncompare_df_cols(df1, df2, df3)\n\n\n\n\n\ncolumn_name\ndf1\ndf2\ndf3\n\n\n\n\na\nNA\ninteger\nNA\n\n\nA\ninteger\nNA\ninteger\n\n\nb\ncharacter\nfactor\ncharacter\n\n\nc\nNA\nnumeric\nNA\n\n\n\n\n\n\nIf you just want a simple TRUE/FALSE value telling you whether the dfs match, you can use compare_df_cols_same():\n\nstr(compare_df_cols_same(df1, df2, df3, verbose = FALSE))\n\n logi FALSE"
  },
  {
    "objectID": "posts/janitor/index.html#examining-data-and-crosstabs",
    "href": "posts/janitor/index.html#examining-data-and-crosstabs",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Examining data and crosstabs",
    "text": "Examining data and crosstabs\njanitor’s version of tables are called tabyls. You can easily generate crosstabs:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island)\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n\n\n\n\nThere are lots of ways to pretty up the output via adorn_* commands, giving things like column or row percentages, optionally with ns in parentheses:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island) |&gt; \n  adorn_totals(\"col\")  |&gt; \n  adorn_percentages(\"row\")  |&gt; \n  adorn_pct_formatting(digits = 2) |&gt; \n  adorn_ns()\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\nTotal\n\n\n\n\nAdelie\n28.95% (44)\n36.84% (56)\n34.21% (52)\n100.00% (152)\n\n\nChinstrap\n0.00% (0)\n100.00% (68)\n0.00% (0)\n100.00% (68)\n\n\nGentoo\n100.00% (124)\n0.00% (0)\n0.00% (0)\n100.00% (124)\n\n\n\n\n\n\nYou can also use the adorn_* functions on regular ol’ dfs:\n\npalmerpenguins::penguins |&gt; \n1  dplyr::sample_n(10) |&gt;\n  dplyr::select(-year) |&gt; \n  adorn_totals(\"row\")\n\n\n1\n\nChoose 10 random rows so this doesn’t print forever\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nChinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n\n\nAdelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n\n\nChinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n\n\nGentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n\n\nAdelie\nDream\n39.7\n17.9\n193\n4250\nmale\n\n\nChinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n\n\nGentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n\n\nGentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n\n\nGentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n\n\nGentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n\n\nTotal\n-\n461.0\n162.9\n2050\n43875\n-\n\n\n\n\n\n\nCheck out the tabyls vignette for more info.\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n           janitor         2.2.0 2023-02-02 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n         snakecase        0.11.0 2019-05-25 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/khroma/index.html",
    "href": "posts/khroma/index.html",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "",
    "text": "Load packageslibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "posts/khroma/index.html#khroma---colorblind-friendly-palettes",
    "href": "posts/khroma/index.html#khroma---colorblind-friendly-palettes",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "\nkhroma - colorblind-friendly palettes",
    "text": "khroma - colorblind-friendly palettes\nkhroma contains a number of color schemes that are colorblind-friendly, divided into diverging, qualitative, and sequential types:\n\nkhroma::info() |&gt;\n  group_by(type) |&gt;\n  summarize(palettes = paste(palette, collapse = \", \"))\n\n\n\n\n\n\n\n\ntype\npalettes\n\n\n\ndiverging\nbroc, cork, vik, lisbon, tofino, berlin, roma, bam, vanimo, oleron, bukavu, fes, sunset, BuRd, PRGn\n\n\nqualitative\nbright, highcontrast, vibrant, muted, mediumcontrast, pale, dark, light, okabeito, okabeitoblack, stratigraphy, soil, land\n\n\nsequential\ndevon, lajolla, bamako, davos, bilbao, nuuk, oslo, grayC, hawaii, lapaz, tokyo, buda, acton, turku, imola, batlow, batlowW, batlowK, brocO, corkO, vikO, romaO, bamO, YlOrBr, iridescent, discreterainbow, smoothrainbow\n\n\n\n\n\n\nThe color function takes a palette name and returns a function, which in turn returns a palette of specified size:\n\nlibrary(khroma)\n\nbright_fun &lt;- color(\"bright\")\nbright_fun(5)\n\n     blue       red     green    yellow      cyan \n\"#4477AA\" \"#EE6677\" \"#228833\" \"#CCBB44\" \"#66CCEE\" \nattr(,\"missing\")\n[1] NA\n\n\nAnd you can preview these palettes with plot_scheme():\n\nplot_scheme(bright_fun(7), names = TRUE,\n            colours = TRUE) # NB: `colours` must be spelled British-ly\n\n\n\n\n\n\n\nFurther, you can preview the palette as viewed by several types of colorblindness:\n\nplot_scheme_colorblind(bright_fun(7))\n\n\n\n\n\n\n\n\nEach of the schemes have built-in ggplot scales in the form scale_color_{palettename} and scale_fill_{palettename}:\n\nplot &lt;- midwest |&gt; \n  filter(percbelowpoverty &lt; 30) |&gt; \n  ggplot(aes(x = percollege, y = percbelowpoverty, color = state)) +\n    geom_point(size = 3, alpha =.5) +\n    scale_color_bright()\n\nplot\n\n\nPercent of population with a college degree vs. percent of population below the poverty line, by state. Data from ggplot2::midwest\n\n\n\n\n(NB: you can use the sequential and diverging type palettes for discrete/categorical data if you add the argument discrete = TRUE)"
  },
  {
    "objectID": "posts/khroma/index.html#colorblindr---preview-your-plots-with-colorblind-simulation",
    "href": "posts/khroma/index.html#colorblindr---preview-your-plots-with-colorblind-simulation",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "\ncolorblindr - Preview your plots with colorblind simulation",
    "text": "colorblindr - Preview your plots with colorblind simulation\ncolorblindr::cvd_grid will simulate how your plots will look to people with various types of colorblindness:\n\n# remotes::install_github(\"clauswilke/colorblindr\")\n\nplot &lt;- msleep |&gt; \n  filter(!is.na(vore)) |&gt; \n  ggplot(aes(x = sleep_rem, fill = vore)) +\n  geom_density(alpha = 0.75) +\n  scale_fill_light()\n\nplot\n\ncolorblindr::cvd_grid(plot)\n\n\nDensity of hours of REM sleep, for carnivores, omnivores, herbivores, and insectivores. Data from the mammal sleep dataset (ggplot::msleep).\n\n\n\n\n\nThe same plot in various simulations of colorblindness\n\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n       colorblindr         0.1.0 2023-07-05         Github\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n           cowplot         1.1.1 2020-12-30 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n            khroma        1.10.0 2023-04-17 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/diffobj/index.html",
    "href": "posts/diffobj/index.html",
    "title": "\ndiffobj: Compare two dfs (or other objects)",
    "section": "",
    "text": "What’s the difference between two dfs?\ndiffobj::diffPrint() gives a handy visual way to check differences:\n\nlibrary(diffobj)\n\na &lt;- b &lt;- matrix(1:100, ncol=2)\na &lt;- a[-20,]\nb &lt;- b[-45,]\nb[c(18, 44)] &lt;- 999\n\ndiffPrint(target=a, current=b)\n\n&lt; a                &gt; b              \n@@ 17,6 @@         @@ 17,7 @@       \n~       [,1] [,2]  ~       [,1] [,2]\n  [16,]   16   66    [16,]   16   66\n  [17,]   17   67    [17,]   17   67\n&lt; [18,]   18   68  &gt; [18,]  999   68\n  [19,]   19   69    [19,]   19   69\n~                  &gt; [20,]   20   70\n  [20,]   21   71    [21,]   21   71\n  [21,]   22   72    [22,]   22   72\n@@ 42,6 @@         @@ 43,5 @@       \n  [41,]   42   92    [42,]   42   92\n  [42,]   43   93    [43,]   43   93\n&lt; [43,]   44   94  &gt; [44,]  999   94\n&lt; [44,]   45   95  ~                \n  [45,]   46   96    [45,]   46   96\n  [46,]   47   97    [46,]   47   97\n\n\n\n(In RStudio, this is shown in a colorful manner in the Viewer)\n\nThis also works for other types of objects, such as character vectors:\n\ndiffPrint(letters[1:3], c(\"a\", \"B\", \"c\"))\n\n&lt; letters[1:3]     &gt; c(\"a\", \"B\", \"..\n@@ 1 @@            @@ 1 @@          \n&lt; [1] \"a\" \"b\" \"c\"  &gt; [1] \"a\" \"B\" \"c\"\n\n\nFor more details, see the Introduction to diffobjj vignette, or the diffobj github rep.\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.0 2023-01-12 CRAN (R 4.3.0)\n           diffobj         0.3.5 2021-10-05 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/upgrading_R/index.html",
    "href": "posts/upgrading_R/index.html",
    "title": "Upgrading R without losing all your packages",
    "section": "",
    "text": "If you upgrade R to a new major or minor release (e.g. 4.0 or 4.1, but not 4.1.1), your library of installed packages doesn’t come along for the ride."
  },
  {
    "objectID": "posts/upgrading_R/index.html#before-you-upgrade",
    "href": "posts/upgrading_R/index.html#before-you-upgrade",
    "title": "Upgrading R without losing all your packages",
    "section": "Before you upgrade",
    "text": "Before you upgrade\nBefore you upgrade, you should make a list of all of your installed packages—this is easy with sessioninfo::package_info(\"installed\"). If you’ve got packages installed from multiple sources (like CRAN and also Github), it’s best to save these as separate lists to facilitate automated reinstallation of these grouped by source:\n\nlibrary(tidyverse)\n\n# Figure out what's installed\ninstalled_packages &lt;- sessioninfo::package_info(\"installed\") |&gt; \n  mutate(\"where_from\" = dplyr::case_when(\n    str_detect(source, \"CRAN\") ~ \"CRAN\",\n    str_detect(source, \"Github\") ~ \"Github\",\n    .default = \"other\" # catch any packages from other sources;\n                       # not automatically installed below\n    )\n  ) |&gt; \n  nest(.by = where_from)\n\n# Where to write the lists of packages.  Change as needed\nfile_location &lt;- fs::path(\"~/Desktop/tmp/\")\n\n# Write these lists to disk\ninstalled_packages %&gt;% \n  pwalk(function(where_from, data) {\n    write_csv(data,\n              file = fs::path(file_location,\n                              paste0(where_from, \"_packages\"),\n                              ext = \"csv\"))\n  })"
  },
  {
    "objectID": "posts/upgrading_R/index.html#after-you-upgrade",
    "href": "posts/upgrading_R/index.html#after-you-upgrade",
    "title": "Upgrading R without losing all your packages",
    "section": "After you upgrade",
    "text": "After you upgrade\nThen, after you upgrade R, you can re-install the packages from these lists:\n\n# Install manually some things we'll need since they won't be installed anymore\ninstall.packages(c(\"remotes\", \"dplyr\", \"stringr\"))\n\nfile_location &lt;- \"~/Desktop/tmp/\" # Change as needed\n\n# Install CRAN packages\nCRAN_packages &lt;- read.csv(paste0(file_location, \"CRAN_packages\", \".csv\"))\nremotes::install_cran(CRAN_packages$package)\n\n# Install Github packages\ngithub_packages &lt;- read.csv(paste0(file_location, \"Github_packages\", \".csv\")) |&gt;\n  dplyr::mutate(github_source = stringr::str_extract(source,\n      \"(?&lt;=Github \\\\().*(?=@)\")) # Get the username and repo name\nremotes::install_github(github_packages$github_source)\n\nNB: If you have locally installed packages, or packages from another source, these aren’t automatically reinstalled with the code above, but are listed in other_packages.csv.\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n               bit         4.0.5 2022-11-15 CRAN (R 4.3.0)\n             bit64         4.0.5 2020-08-30 CRAN (R 4.3.0)\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n                fs         1.6.2 2023-04-25 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n             vroom         1.6.3 2023-04-28 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/glimpse/index.html",
    "href": "posts/glimpse/index.html",
    "title": "\ndplyr::glimpse(): Prettier than str()\n",
    "section": "",
    "text": "Instead of str(df) to see the structure of a dataframe, try dplyr::glimpse()1 instead. It gives a horizontal output and shows more data than fits with str():\ndplyr::glimpse(palmerpenguins::penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\nYou can also force more data to be shown with the width option:\ndplyr::glimpse(palmerpenguins::penguins, width = 200)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgers…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, 34.6, 36.6, 38.7, 42.5, 34.4, 46.0, 37.8, 37.7, 35.9, 38.2, 38.8, 35.3, 40.6, 40.5, 37.9, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, 21.1, 17.8, 19.0, 20.7, 18.4, 21.5, 18.3, 18.7, 19.2, 18.1, 17.2, 18.9, 18.6, 17.9, 18.6, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195, 197, 184, 194, 174, 180, 189, 185, 180, 187, 183, 187, 172, 180, 178, 178, 188, 184, 195…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, 4400, 3700, 3450, 4500, 3325, 4200, 3400, 3600, 3800, 3950, 3800, 3800, 3550, 3200, 3150, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male, NA, NA, NA, NA, female, male, male, female, female, male, female, male, female, male, female, male, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "posts/glimpse/index.html#footnotes",
    "href": "posts/glimpse/index.html#footnotes",
    "title": "\ndplyr::glimpse(): Prettier than str()\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nTechnically, glimpse is from the pillar package, but it’s re-exported by dplyr, which I usually have loaded anyway.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "This is a collection of R packages, bits of code, and other trivia that I find useful. It was originally written for myself, but hopefully others will find some useful tidbits. Many of the posts are just digested versions of package vignettes or documentation, emphasizing the pieces that seem most useful.\n\n\n\n\n\n\n\n   \n     \n     Order By\nDefault\n\n          Title\n        \n\n          Date - Oldest\n        \n\n          Date - Newest\n        \n\n    \n      \n      \n\n\n\n\n\n\nTitle\n\n\nCategories\n\n\nDate\n\n\n\n\n\nTables for Word in flextable\n\n\ntables\n\n\n5/17/24\n\n\n\n\nSort numbered strings (or factor levels, or filenames) correctly even without zero-padding\n\n\ndata cleaning,sorting\n\n\n1/12/24\n\n\n\n\nView the structure of deeply nested objects or complex function calls with lobstr and listviewer\n\n\nmisc\n\n\n7/10/23\n\n\n\n\nComposing multiple plots with patchwork\n\n\nvisualization\n\n\n7/7/23\n\n\n\n\nSpotlight subsets of data in your plots with gghighlight\n\n\nvisualization\n\n\n7/6/23\n\n\n\n\nkhroma and colorblindr: Tools for colorblind-friendly plots\n\n\nvisualization,colors\n\n\n7/4/23\n\n\n\n\nPaginate a faceted graph and save as a single multi-page PDF\n\n\nvisualization\n\n\n7/1/23\n\n\n\n\nUpgrading R without losing all your packages\n\n\nupgrading,package management\n\n\n6/30/23\n\n\n\n\nInteractive plots with ggiraph\n\n\nvisualization,interactivity\n\n\n6/29/23\n\n\n\n\nSummary statistics for dfs with skimr\n\n\ndataframes,summarizing\n\n\n6/26/23\n\n\n\n\nfuzzyjoin: Join dfs with inexact matching\n\n\ndataframes,joins\n\n\n6/26/23\n\n\n\n\ndplyr::glimpse(): Prettier than str()\n\n\ndataframes,summarizing\n\n\n6/26/23\n\n\n\n\njanitor: Clean dirty data, plus improved tables and crosstab\n\n\ndata cleaning\n\n\n6/25/23\n\n\n\n\ndiffobj: Compare two dfs (or other objects)\n\n\ndataframes\n\n\n6/25/23\n\n\n\n\nthinkr::peep(): See intermediate stages of piped dfs\n\n\ndataframes,piping\n\n\n6/1/23\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/patchwork/index.html#footnotes",
    "href": "posts/patchwork/index.html#footnotes",
    "title": "Composing multiple plots with patchwork\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nSomewhat annoyingly, the argument order here is tlbr, rather than trbl as in css, which is how my brain works.↩︎"
  },
  {
    "objectID": "posts/thinkr_peep/index.html#footnotes",
    "href": "posts/thinkr_peep/index.html#footnotes",
    "title": "thinkr::peep(): See intermediate stages of piped dfs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can’t use the base pipe’s placeholder, _, here, since it does not work in nested functions.↩︎"
  },
  {
    "objectID": "posts/lobstr/index.html",
    "href": "posts/lobstr/index.html",
    "title": "View the structure of deeply nested objects or complex function calls with lobstr and listviewer\n",
    "section": "",
    "text": "When working with deeply nested structures (either objects or function calls), sometimes it’s helpful to visualize what you’re working with. The lobstr package provides functions for viewing these structures in an easy-to-read way—I find it more intuitive to parse than str().\nIf you’re using RStudio you can, of course, use the viewer with View(), but that works best for purely rectangular data with no hierarchical structure."
  },
  {
    "objectID": "posts/lobstr/index.html#tree-structure-for-nested-dataframes",
    "href": "posts/lobstr/index.html#tree-structure-for-nested-dataframes",
    "title": "View the structure of deeply nested objects or complex function calls with lobstr and listviewer\n",
    "section": "Tree structure for (nested) dataframes",
    "text": "Tree structure for (nested) dataframes\nlobstr::tree()\nlobstr::tree() provides a tree structure for data structures, and is particularly useful when you have nested structures.\nWe’ll start with the a subset of the mpg data provided in ggplot2. We nest by cyl, and then call tree(), resulting in a handy representation of the structure (scroll to see full output).\n\nlibrary(tidyverse)\nlibrary(lobstr)\n\nmpg_subset &lt;-  mpg |&gt; \n  select(class, cyl, manufacturer, hwy, cty)\n\nmpg_subset |&gt;\n  nest(.by = cyl) |&gt; \n  lobstr::tree()\n\nS3&lt;tbl_df/tbl/data.frame&gt;\n├─cyl&lt;int [4]&gt;: 4, 6, 8, 5\n└─data: &lt;list&gt;\n  ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │ ├─class&lt;chr [81]&gt;: \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"midsize\", \"midsize\", ...\n  │ ├─manufacturer&lt;chr [81]&gt;: \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"chevrolet\", \"chevrolet\", ...\n  │ ├─hwy&lt;int [81]&gt;: 29, 29, 31, 30, 26, 25, 28, 27, 27, 30, ...\n  │ └─cty&lt;int [81]&gt;: 18, 21, 20, 21, 18, 16, 20, 19, 19, 22, ...\n  ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │ ├─class&lt;chr [79]&gt;: \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"midsize\", \"midsize\", \"midsize\", ...\n  │ ├─manufacturer&lt;chr [79]&gt;: \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"chevrolet\", ...\n  │ ├─hwy&lt;int [79]&gt;: 26, 26, 27, 25, 25, 25, 25, 24, 25, 26, ...\n  │ └─cty&lt;int [79]&gt;: 16, 18, 18, 15, 17, 17, 15, 15, 17, 18, ...\n  ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │ ├─class&lt;chr [70]&gt;: \"midsize\", \"suv\", \"suv\", \"suv\", \"suv\", \"suv\", \"2seater\", \"2seater\", \"2seater\", \"2seater\", ...\n  │ ├─manufacturer&lt;chr [70]&gt;: \"audi\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", ...\n  │ ├─hwy&lt;int [70]&gt;: 23, 20, 15, 20, 17, 17, 26, 23, 26, 25, ...\n  │ └─cty&lt;int [70]&gt;: 16, 14, 11, 14, 13, 12, 16, 15, 16, 15, ...\n  └─S3&lt;tbl_df/tbl/data.frame&gt;\n    ├─class&lt;chr [4]&gt;: \"compact\", \"compact\", \"subcompact\", \"subcompact\"\n    ├─manufacturer&lt;chr [4]&gt;: \"volkswagen\", \"volkswagen\", \"volkswagen\", \"volkswagen\"\n    ├─hwy&lt;int [4]&gt;: 29, 29, 28, 29\n    └─cty&lt;int [4]&gt;: 21, 21, 20, 20\n\n\nThis works for multiply-nested objects as well—here we nest the mpg dataset by cyl and by class:\n\nmpg_subset |&gt; \n  nest(.by = c(cyl, class)) |&gt; \n  nest(.by = class) |&gt; \n  head(2) |&gt; \n  tree()\n\nS3&lt;tbl_df/tbl/data.frame&gt;\n├─class&lt;chr [2]&gt;: \"compact\", \"midsize\"\n└─data: &lt;list&gt;\n  ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │ ├─cyl&lt;int [3]&gt;: 4, 6, 5\n  │ └─data: &lt;list&gt;\n  │   ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │   │ ├─manufacturer&lt;chr [32]&gt;: \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"nissan\", \"nissan\", ...\n  │   │ ├─hwy&lt;int [32]&gt;: 29, 29, 31, 30, 26, 25, 28, 27, 29, 27, ...\n  │   │ └─cty&lt;int [32]&gt;: 18, 21, 20, 21, 18, 16, 20, 19, 21, 19, ...\n  │   ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │   │ ├─manufacturer&lt;chr [13]&gt;: \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"toyota\", \"toyota\", \"toyota\", ...\n  │   │ ├─hwy&lt;int [13]&gt;: 26, 26, 27, 25, 25, 25, 25, 26, 26, 27, ...\n  │   │ └─cty&lt;int [13]&gt;: 16, 18, 18, 15, 17, 17, 15, 18, 18, 18, ...\n  │   └─S3&lt;tbl_df/tbl/data.frame&gt;\n  │     ├─manufacturer&lt;chr [2]&gt;: \"volkswagen\", \"volkswagen\"\n  │     ├─hwy&lt;int [2]&gt;: 29, 29\n  │     └─cty&lt;int [2]&gt;: 21, 21\n  └─S3&lt;tbl_df/tbl/data.frame&gt;\n    ├─cyl&lt;int [3]&gt;: 6, 8, 4\n    └─data: &lt;list&gt;\n      ├─S3&lt;tbl_df/tbl/data.frame&gt;\n      │ ├─manufacturer&lt;chr [23]&gt;: \"audi\", \"audi\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"hyundai\", \"hyundai\", \"hyundai\", \"nissan\", \"nissan\", ...\n      │ ├─hwy&lt;int [23]&gt;: 24, 25, 26, 29, 26, 26, 26, 28, 27, 26, ...\n      │ └─cty&lt;int [23]&gt;: 15, 17, 18, 18, 17, 18, 18, 19, 19, 19, ...\n      ├─S3&lt;tbl_df/tbl/data.frame&gt;\n      │ ├─manufacturer&lt;chr [2]&gt;: \"audi\", \"pontiac\"\n      │ ├─hwy&lt;int [2]&gt;: 23, 25\n      │ └─cty&lt;int [2]&gt;: 16, 16\n      └─S3&lt;tbl_df/tbl/data.frame&gt;\n        ├─manufacturer&lt;chr [16]&gt;: \"chevrolet\", \"chevrolet\", \"hyundai\", \"hyundai\", \"hyundai\", \"hyundai\", \"nissan\", \"nissan\", \"toyota\", \"toyota\", ...\n        ├─hwy&lt;int [16]&gt;: 27, 30, 26, 27, 30, 31, 31, 32, 29, 27, ...\n        └─cty&lt;int [16]&gt;: 19, 22, 18, 18, 21, 21, 23, 23, 21, 21, ...\n\n\nIf the output is a bit overwhelming with all of the values being printed, you can specify the val_printer argument—here we give it an empty anonymous function so that no values are printed. This helps to see the structure a little bit more clearly:\n\nmpg_subset |&gt; \n  nest(.by = c(cyl, class)) |&gt; \n  nest(.by = class) |&gt; \n  head(2) |&gt; \n  tree(val_printer = \\(x) \"\" )\n\nS3&lt;tbl_df/tbl/data.frame&gt;\n├─class&lt;chr [2]&gt;: \n└─data: &lt;list&gt;\n  ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │ ├─cyl&lt;int [3]&gt;: \n  │ └─data: &lt;list&gt;\n  │   ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │   │ ├─manufacturer&lt;chr [32]&gt;: \n  │   │ ├─hwy&lt;int [32]&gt;: \n  │   │ └─cty&lt;int [32]&gt;: \n  │   ├─S3&lt;tbl_df/tbl/data.frame&gt;\n  │   │ ├─manufacturer&lt;chr [13]&gt;: \n  │   │ ├─hwy&lt;int [13]&gt;: \n  │   │ └─cty&lt;int [13]&gt;: \n  │   └─S3&lt;tbl_df/tbl/data.frame&gt;\n  │     ├─manufacturer&lt;chr [2]&gt;: \n  │     ├─hwy&lt;int [2]&gt;: \n  │     └─cty&lt;int [2]&gt;: \n  └─S3&lt;tbl_df/tbl/data.frame&gt;\n    ├─cyl&lt;int [3]&gt;: \n    └─data: &lt;list&gt;\n      ├─S3&lt;tbl_df/tbl/data.frame&gt;\n      │ ├─manufacturer&lt;chr [23]&gt;: \n      │ ├─hwy&lt;int [23]&gt;: \n      │ └─cty&lt;int [23]&gt;: \n      ├─S3&lt;tbl_df/tbl/data.frame&gt;\n      │ ├─manufacturer&lt;chr [2]&gt;: \n      │ ├─hwy&lt;int [2]&gt;: \n      │ └─cty&lt;int [2]&gt;: \n      └─S3&lt;tbl_df/tbl/data.frame&gt;\n        ├─manufacturer&lt;chr [16]&gt;: \n        ├─hwy&lt;int [16]&gt;: \n        └─cty&lt;int [16]&gt;: \n\n\ntree is also handy for list-columns that have complex objects like models:\n\nmpg_subset |&gt; \n  nest(.by = class) |&gt; \n  head(2) |&gt; # Get a subset of the data so output is manageable\n  mutate(data = map(data, \\(x) lm(cty ~ manufacturer, data = x))) |&gt; \n  tree()\n\nS3&lt;tbl_df/tbl/data.frame&gt;\n├─class&lt;chr [2]&gt;: \"compact\", \"midsize\"\n└─data: &lt;list&gt;\n  ├─S3&lt;lm&gt;\n  │ ├─coefficients&lt;dbl [5]&gt;: 17.9333333333333, 2.06666666666666, 1.81666666666667, 4.31666666666667, 2.85238095238095\n  │ ├─residuals&lt;dbl [47]&gt;: 0.066666666666665, 3.06666666666667, 2.06666666666666, 3.06666666666667, -1.93333333333334, 0.0666666666666665, 0.0666666666666665, 0.0666666666666665, -1.93333333333333, 2.06666666666667, ...\n  │ ├─effects&lt;dbl [47]&gt;: -137.988281957008, -0.184506241605778, -0.803194840135016, 8.56434361157096, 7.67570324864425, -0.0407824196725389, -0.0407824196725389, -0.0407824196725389, -2.04078241967254, 1.95921758032746, ...\n  │ ├─rank: 5\n  │ ├─fitted.values&lt;dbl [47]&gt;: 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, 17.9333333333333, ...\n  │ ├─assign&lt;int [5]&gt;: 0, 1, 1, 1, 1\n  │ ├─qr: S3&lt;qr&gt;\n  │ │ ├─qr&lt;dbl [235]&gt;: -6.85565460040104, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, 0.145864991497895, ...\n  │ │ ├─qraux&lt;dbl [5]&gt;: 1.14586499149789, 1.02683653004132, 1.03957282449068, 1.08213154946517, 1.13553443533542\n  │ │ ├─pivot&lt;int [5]&gt;: 1, 2, 3, 4, 5\n  │ │ ├─tol: 1e-07\n  │ │ └─rank: 5\n  │ ├─df.residual: 42\n  │ ├─contrasts: &lt;list&gt;\n  │ │ └─manufacturer: \"contr.treatment\"\n  │ ├─xlevels: &lt;list&gt;\n  │ │ └─manufacturer&lt;chr [5]&gt;: \"audi\", \"nissan\", \"subaru\", \"toyota\", \"volkswagen\"\n  │ ├─call: &lt;language&gt; lm(formula = cty ~ manufacturer, data = x)\n  │ ├─terms: S3&lt;terms/formula&gt; cty ~ manufacturer\n  │ └─model: S3&lt;data.frame&gt;\n  │   ├─cty&lt;int [47]&gt;: 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, ...\n  │   └─manufacturer&lt;chr [47]&gt;: \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", ...\n  └─S3&lt;lm&gt;\n    ├─coefficients&lt;dbl [7]&gt;: 16, 2.80000000000001, 3.00000000000001, 4.00000000000001, 1.00000000000001, 3.85714285714287, 2.57142857142858\n    ├─residuals&lt;dbl [41]&gt;: -1.00000000000003, 1.00000000000001, 1.05208052500074e-14, 0.200000000000008, 3.2, -0.800000000000004, -0.8, -1.8, -1, -1, ...\n    ├─effects&lt;dbl [41]&gt;: -120.097622892338, 0.10476454436544, 0.736955526660781, 3.98035930389303, -3.23748103044015, 4.17435145669764, 3.72635402044873, -1.27026155514514, -0.923635942390468, -0.923635942390468, ...\n    ├─rank: 7\n    ├─fitted.values&lt;dbl [41]&gt;: 16, 16, 16, 18.8, 18.8, 18.8, 18.8, 18.8, 19, 19, ...\n    ├─assign&lt;int [7]&gt;: 0, 1, 1, 1, 1, 1, 1\n    ├─qr: S3&lt;qr&gt;\n    │ ├─qr&lt;dbl [287]&gt;: -6.40312423743285, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, 0.156173761888606, ...\n    │ ├─qraux&lt;dbl [7]&gt;: 1.15617376188861, 1.0503406378574, 1.06742880959931, 1.02124277862812, 1.02296110820256, 1.03939209519442, 1.09021806425183\n    │ ├─pivot&lt;int [7]&gt;: 1, 2, 3, 4, 5, 6, 7\n    │ ├─tol: 1e-07\n    │ └─rank: 7\n    ├─df.residual: 34\n    ├─contrasts: &lt;list&gt;\n    │ └─manufacturer: \"contr.treatment\"\n    ├─xlevels: &lt;list&gt;\n    │ └─manufacturer&lt;chr [7]&gt;: \"audi\", \"chevrolet\", \"hyundai\", \"nissan\", \"pontiac\", \"toyota\", \"volkswagen\"\n    ├─call: &lt;language&gt; lm(formula = cty ~ manufacturer, data = x)\n    ├─terms: S3&lt;terms/formula&gt; cty ~ manufacturer\n    └─model: S3&lt;data.frame&gt;\n      ├─cty&lt;int [41]&gt;: 15, 17, 16, 19, 22, 18, 18, 17, 18, 18, ...\n      └─manufacturer&lt;chr [41]&gt;: \"audi\", \"audi\", \"audi\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"chevrolet\", \"hyundai\", \"hyundai\", ...\n\n\nlistviewer\nIf you’re looking for a more GUI-type visualization of nested dfs, consider listviewer::reactjson():\n\n\n\n\nmpg_subset |&gt; \n  nest(.by = c(cyl, class)) |&gt; \n  nest(.by = class, .key = \"class_data\") |&gt; \n  listviewer::reactjson(collapsed = 4) # collapse after 4 levels deep\n\n\n\n\n\n\nreactjson gives essentially the same view as tree: each column of the df is its own node. You can, though, get a more row-wise view which I sometimes find more intuitive by first converting to JSON—here each level of class is its own node:\n\nmpg_subset |&gt; \n  nest(.by = c(cyl, class)) |&gt; \n  nest(.by = class, .key = \"class_data\") |&gt; \n  jsonlite::toJSON() |&gt; \n  listviewer::reactjson(collapsed = 4) # collapse after 4 levels deep\n\n\n\n\n\n\nThe listviewer package also provides an alternative JSON viewer, jsonedit():\n\n\nmpg_subset |&gt; \n  nest(.by = c(cyl, class)) |&gt; \n  nest(.by = class, .key = \"class_data\") |&gt; \n  jsonlite::toJSON() |&gt; # convert df to JSON\n  listviewer::jsonedit()\n\n\n\n\n\n\n\n(A quick note: toJSON() only converts a limited selection of objects; it can’t, for example, convert an lm model to visualize like we did with the midwest_data data above.)"
  },
  {
    "objectID": "posts/lobstr/index.html#abstract-syntax-trees-for-complex-function-calls",
    "href": "posts/lobstr/index.html#abstract-syntax-trees-for-complex-function-calls",
    "title": "View the structure of deeply nested objects or complex function calls with lobstr and listviewer\n",
    "section": "Abstract syntax trees for complex function calls",
    "text": "Abstract syntax trees for complex function calls\nlobstr also provides the function ast() which gives a visual representation of complex function calls, letting you see the order in which the functions are being evaluated. Here we see that our unnamed function calls + on x and y.\n\nast(function(x = 1, y = 2) { x + y } )\n\n█─`function` \n├─█─x = 1 \n│ └─y = 2 \n├─█─`{` \n│ └─█─`+` \n│   ├─x \n│   └─y \n└─&lt;inline srcref&gt; \n\n\nThis is particularly useful when using pipes, where the linear order of the code is actually the reverse of what it would be without piping. Here, for example, we can see that mutate is applying to a grouped df, which itself was filtered.\n\nmpg |&gt; \n  filter(manufacturer == \"honda\") |&gt; \n  group_by(cyl) |&gt; \n  mutate(mean_hwy = mean(hwy)) |&gt; \n  ast()\n\n█─mutate \n├─█─group_by \n│ ├─█─filter \n│ │ ├─mpg \n│ │ └─█─`==` \n│ │   ├─manufacturer \n│ │   └─\"honda\" \n│ └─cyl \n└─mean_hwy = █─mean \n             └─hwy \n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-10\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n    ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n    jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n  listviewer         3.0.0 2019-11-02 CRAN (R 4.3.0)\n      lobstr         1.1.2 2022-06-22 CRAN (R 4.3.0)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n        ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n      reactR         0.4.4 2021-02-22 CRAN (R 4.3.0)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n   rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n       vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/regex_tools/index.html",
    "href": "posts/regex_tools/index.html",
    "title": "TITLE",
    "section": "",
    "text": "Setuplibrary(tidyverse)\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2024-01-12\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.2)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.2)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.2)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.2)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.2)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.2)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.2)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.2)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.7 2023-11-03 CRAN (R 4.3.1)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.2)\n    jsonlite         1.8.8 2023-12-04 CRAN (R 4.3.1)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.2)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.2)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.2)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.2)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n        ragg         1.2.5 2023-01-12 CRAN (R 4.3.2)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.2)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.2)\n   rmarkdown          2.21 2023-03-26 CRAN (R 4.3.2)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.2)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.2)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.2)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.2)\n systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.2)\n textshaping         0.3.6 2021-10-13 CRAN (R 4.3.2)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.2)\n       vctrs         0.6.2 2023-04-19 CRAN (R 4.3.2)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.2)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.2)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.2)"
  },
  {
    "objectID": "AARONREADME.html",
    "href": "AARONREADME.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "#Adding blog posts\n\nCopy posts/_post_template to a new folder with an appropriate name\nThe /_include_header.qmd and /_include_footer.qmd files contain the code to load a renv snapshot from the directory if it exists, and then to save a new one at the end."
  },
  {
    "objectID": "posts/naturalsort/index.html",
    "href": "posts/naturalsort/index.html",
    "title": "Sort numbered strings (or factor levels, or filenames) correctly even without zero-padding",
    "section": "",
    "text": "Setup\nlibrary(tidyverse)\nlibrary(naturalsort)\n\n\nIt’s quite common to see lists of items (data, files, etc) that are numbered, such as the hypothetical list of files below:\n\nfilenames &lt;- c(\"file2.csv\", \"file1.csv\",  \"file3.csv\",\n               \"file11.csv\", \"file10.csv\", \"file20.csv\")\nprint(filenames)\n\n[1] \"file2.csv\"  \"file1.csv\"  \"file3.csv\"  \"file11.csv\" \"file10.csv\"\n[6] \"file20.csv\"\n\n\nIf you want to sort these by number, you run into a problem, since the filenames are strings: 1 is followed by 10, which is followed by 2, since 10 precedes 2 “alphabetically”:\n\nfilenames |&gt; sort()\n\n[1] \"file1.csv\"  \"file10.csv\" \"file11.csv\" \"file2.csv\"  \"file20.csv\"\n[6] \"file3.csv\" \n\n\nOne solution is to rename your items such that they are zero-padded. A kludge with stringr’s str_replace()andstr_pad()can get the job done.  Because of the leading zeros,sort()` will get the result you expect:\n\npadded &lt;- str_replace(filenames, \"[0-9]+\", \\(x) str_pad(x, 2, pad=\"0\"))\npadded |&gt; sort()\n\n[1] \"file01.csv\" \"file02.csv\" \"file03.csv\" \"file10.csv\" \"file11.csv\"\n[6] \"file20.csv\"\n\n\nRather than renaming your items, naturalsort::naturalsort() orders your items in “human natural” order:\n\nfilenames |&gt; naturalsort::naturalsort()\n\n[1] \"file1.csv\"  \"file2.csv\"  \"file3.csv\"  \"file10.csv\" \"file11.csv\"\n[6] \"file20.csv\"\n\n\nThe naturalsort package also comes with the command naturalfactor(), which can reorder a factor in the same way, or turn an unordered list of strings into a factor:\n\nmy_factor &lt;- factor(c(\"level_1\", \"level_10\", \"level_2\"))\nnaturalsort::naturalfactor(my_factor)\n\n[1] level_1  level_10 level_2 \nLevels: level_1 &lt; level_2 &lt; level_10\n\n\n\nc(\"level1\", \"level10\", \"level2\") |&gt; naturalfactor()\n\n[1] level1  level10 level2 \nLevels: level1 &lt; level2 &lt; level10\n\n\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2024-01-12\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.2)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.2)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.2)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.2)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.2)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.2)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.2)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.2)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.7 2023-11-03 CRAN (R 4.3.1)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.2)\n    jsonlite         1.8.8 2023-12-04 CRAN (R 4.3.1)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.2)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.2)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.2)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n naturalsort         0.1.3 2016-08-30 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.2)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n        ragg         1.2.5 2023-01-12 CRAN (R 4.3.2)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.2)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.2)\n   rmarkdown          2.21 2023-03-26 CRAN (R 4.3.2)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.2)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.2)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.2)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.2)\n systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.2)\n textshaping         0.3.6 2021-10-13 CRAN (R 4.3.2)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.2)\n       vctrs         0.6.2 2023-04-19 CRAN (R 4.3.2)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.2)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.2)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.2)"
  },
  {
    "objectID": "posts/tables_for_word_flextable/index.html",
    "href": "posts/tables_for_word_flextable/index.html",
    "title": "Tables for Word in flextable\n",
    "section": "",
    "text": "Setuplibrary(tidyverse)\nlibrary(gt)\nlibrary(flextable)\nOn those occasions where I have a coauthor working in Word rather than LaTeX, it’s sometimes useful to be able to output nicely formatted, editable tables directly from R. I like the tables from gt, but they don’t render certain style and formatting options correctly in Word or RTF output (see this issue).1\nSo, in this post I’ll show some tables made with flextable, which has better Word support."
  },
  {
    "objectID": "posts/tables_for_word_flextable/index.html#if-you-dont-need-editability-or-formatting",
    "href": "posts/tables_for_word_flextable/index.html#if-you-dont-need-editability-or-formatting",
    "title": "Tables for Word in flextable\n",
    "section": "If you don’t need editability or formatting…",
    "text": "If you don’t need editability or formatting…\nThere are a few options if you don’t need editable output, or output with fancy formatting.\nEditable but not pretty\nThe option I use the most, for sending tables to Word or Excel is clipr::write_clip(df), which writes df to the clipboard for easy pasting. There’s also clipr::write_last_clip() which can be called right after you create a dataframe and copies it to the clipboard.\nPretty but not editable\nAnother option is to save a gt as an image or a pdf:\n\n  head(mtcars, 3) |&gt; \n    gt() |&gt; \n    gtsave(\"table.png\") # or table.pdf, or whatever\n\n(Saving as an image requires that webshot2 be installed.)"
  },
  {
    "objectID": "posts/tables_for_word_flextable/index.html#flextable",
    "href": "posts/tables_for_word_flextable/index.html#flextable",
    "title": "Tables for Word in flextable\n",
    "section": "flextable",
    "text": "flextable\nPiping a dataframe to flextable() produces a pretty decent initial result:\n\npalmerpenguins::penguins |&gt; \n  select(species, island, bill_length_mm, sex, year) |&gt; \n  slice_sample(n = 5) |&gt;  # select 5 random rows\n  flextable()\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nsex\nyear\n\n\n\nGentoo\nBiscoe\n49.1\nmale\n2,009\n\n\nAdelie\nDream\n39.5\nfemale\n2,007\n\n\nChinstrap\nDream\n46.8\nfemale\n2,009\n\n\nGentoo\nBiscoe\n46.8\nfemale\n2,009\n\n\nAdelie\nBiscoe\n40.6\nmale\n2,008\n\n\n\n\n\n\nWhile we’re at it, let’s change the formatting of that year column. colformat_num targets numeric columns; the j argument narrows it down to specific columns if needed. colformat_num passes ... to format(), so you can use most format() arguments—here I’ve just used big.mark.\n\npenguin_flextable_1 &lt;- palmerpenguins::penguins |&gt; \n  select(species, island, bill_length_mm, sex, year) |&gt; \n  slice_sample(n = 5) |&gt; \n  flextable() |&gt; \n  colformat_num(j = \"year\", big.mark = \"\")\n\npenguin_flextable_1\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nsex\nyear\n\n\n\nChinstrap\nDream\n49.0\nmale\n2008\n\n\nGentoo\nBiscoe\n52.2\nmale\n2009\n\n\nAdelie\nDream\n42.2\nfemale\n2007\n\n\nGentoo\nBiscoe\n50.8\nmale\n2009\n\n\nAdelie\nDream\n42.3\nmale\n2007\n\n\n\n\n\n\nYou can also format columns with a function using set_formatter(). We could, for example, make the species column lowercase and the island column uppercase:\n\npenguin_flextable_1 |&gt; \n  set_formatter(species = tolower, island = toupper)\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nsex\nyear\n\n\n\nchinstrap\nDREAM\n49.0\nmale\n2008\n\n\ngentoo\nBISCOE\n52.2\nmale\n2009\n\n\nadelie\nDREAM\n42.2\nfemale\n2007\n\n\ngentoo\nBISCOE\n50.8\nmale\n2009\n\n\nadelie\nDREAM\n42.3\nmale\n2007\n\n\n\n\n\n\nYou can also pass a anonymous function if you need to specify arguments:\n\npenguin_flextable_1 |&gt; \n  set_formatter(sex = \\(x) ifelse(x == \"male\", \"m\", \"f\")) \n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nsex\nyear\n\n\n\nChinstrap\nDream\n49.0\nm\n2008\n\n\nGentoo\nBiscoe\n52.2\nm\n2009\n\n\nAdelie\nDream\n42.2\nf\n2007\n\n\nGentoo\nBiscoe\n50.8\nm\n2009\n\n\nAdelie\nDream\n42.3\nm\n2007\n\n\n\n\n\n\nA particularly good use of this is using one of the labeller functions from scales, e.g. if you want to format currency:\n\ndata.frame(A = c(12.1, 21.56, 3.64), B = c(44.0, 54.44, 6)) |&gt; \n  flextable() |&gt; \n  set_formatter(A = scales::label_dollar())\n\n\n\n\n\n\nA\nB\n\n\n\n$12.10\n44.00\n\n\n$21.56\n54.44\n\n\n$3.64\n6.00\n\n\n\n\n\n\nMultiple heading levels/grouping\nYou can also make fairly nice tables with a grouping structure in the header using separate_header(). This function will interpret column names with a separator (e.g. “_” as groups and sub-groups.\nConsider the following (unremarkable) dataframe which summarizes penguin bill length by species and sex:\n\npenguin_data &lt;- palmerpenguins::penguins |&gt; \n  select(species, sex, bill_length_mm, year) |&gt; \n  drop_na(sex) |&gt; \n  group_by(species, sex, year) |&gt; \n  summarize(bill.length = mean(bill_length_mm), .groups = \"drop\")\n\npenguin_data |&gt; \n  slice_sample(n = 5)\n\n\n\n\nspecies\nsex\nyear\nbill.length\n\n\n\nAdelie\nfemale\n2008\n36.51600\n\n\nGentoo\nfemale\n2009\n46.26000\n\n\nChinstrap\nfemale\n2008\n46.00000\n\n\nGentoo\nmale\n2008\n48.53913\n\n\nChinstrap\nmale\n2009\n51.10000\n\n\n\n\n\n\nLet’s pipe that into flextable, repeat the year column formatting from before, and also round the bill.length column to 2 digits.\n\npenguin_flextable_2 &lt;- penguin_data |&gt; \n  slice_sample(n = 5) |&gt; \n  flextable() |&gt; \n  colformat_num(j = \"year\", big.mark = \"\") |&gt; \n  colformat_double(digits = 2)\n\npenguin_flextable_2\n\n\n\n\n\n\nspecies\nsex\nyear\nbill.length\n\n\n\nChinstrap\nmale\n2008\n51.40\n\n\nGentoo\nfemale\n2009\n46.26\n\n\nChinstrap\nfemale\n2009\n47.01\n\n\nGentoo\nmale\n2007\n49.00\n\n\nChinstrap\nfemale\n2008\n46.00\n\n\n\n\n\n\nWe can make this a lot easier to read if we have species and island as header rows. We’ll start by pivot_wider-ing these two columns. Note that pivot_wider defaults to combining species and island with an underscore (this becomes important momentarily):\n\npenguin_flextable_3 &lt;- penguin_data |&gt; \n  pivot_wider(names_from = c(\"species\", \"sex\"), values_from = \"bill.length\") |&gt; \n  flextable() |&gt; \n  colformat_num(j = \"year\", big.mark = \"\") |&gt; # reapply our formatting from before\n  colformat_double(digits = 2)\n\npenguin_flextable_3\n\n\n\n\n\n\nyear\nAdelie_female\nAdelie_male\nChinstrap_female\nChinstrap_male\nGentoo_female\nGentoo_male\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nseparate_header() parses the column names using the underscore, and makes two header levels:\n\npenguin_flextable_4 &lt;- penguin_flextable_3 |&gt; \n  separate_header()\n\npenguin_flextable_4\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nYou can change separator with `separate_header(…, split = “…regex…”). This is useful if your variable names already use underscore as a separator.\nNote that since in the combined column names, species comes before sex (e.g. Adelie_male), it’s been used as the top header row. If you switch the order of the names_from argument in pivot_wider, you get sex as the top row. This gives a slightly unexpected result: why are female/male repeated across each category?\n\npenguin_data |&gt; \n  pivot_wider(names_from = c(\"sex\", \"species\"), values_from = \"bill.length\") |&gt; \n  flextable() |&gt; \n  separate_header() |&gt; \n  colformat_num(j = \"year\", big.mark = \"\") |&gt; # reapply our formatting from before\n  colformat_double(digits = 2)\n\n\n\n\n\n\n\nyear\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\nAdelie\nAdelie\nChinstrap\nChinstrap\nGentoo\nGentoo\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nseparate_header() doesn’t rearrange columns to put relevant groups next to each other. If you want a spanning column, you’ll need to reorder the columns manually with relocate():\n\npenguin_data |&gt; \n  pivot_wider(names_from = c(\"sex\", \"species\"), values_from = \"bill.length\") |&gt;\n  relocate(starts_with(\"female\")) |&gt; \n  flextable() |&gt; \n  separate_header() |&gt; \n  colformat_num(j = \"year\", big.mark = \"\") |&gt; # reapply our formatting from before\n  colformat_double(digits = 2)\n\n\n\n\n\n\n\nfemale\nyear\nmale\n\n\nAdelie\nChinstrap\nGentoo\nAdelie\nChinstrap\nGentoo\n\n\n\n\n37.92\n46.57\n45.06\n2007\n39.95\n50.88\n49.00\n\n\n36.52\n46.00\n45.30\n2008\n40.60\n51.40\n48.54\n\n\n37.41\n47.01\n46.26\n2009\n40.56\n51.10\n50.88\n\n\n\n\n\n\nWith savvy use of pivot_wider(names_from = ...) combined with relocate, you can the ordering of header rows and spanning columns you’re after.\nChange labels\nWe can edit text/values with labelizor(). The example below changes all instances of female/male to f/m:\n\npenguin_flextable_4 |&gt; \n  labelizor(labels = c(\"female\" = \"f\", \"male\" = \"m\"))\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nf\nm\nf\nm\nf\nm\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nAdding the j argument selects columns to restrict the changes to:\n\npenguin_flextable_4 |&gt; \n  labelizor(j = c(\"Adelie_female\", \"Chinstrap_female\"), labels = c(\"female\" = \"f\", \"male\" = \"m\"))\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nf\nmale\nf\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nNote that for the j argument, the rownames are based on the underlying df, not what you seen in the flextable. That’s why I have to refer to Adelie_female, which was one of the columns that resulted from out pivot_wider()ing. You can do a lot with j (and in other functions that support it, i for rows), including using logical expressions to filter columns. See here for more details. The labels argument takes name-value pairs where the name is the value to replace and the value is the replacement value.\nConditional formatting\nYou can target cells with specific values for various kinds of formatting. For example, color() sets the text color. The color argument takes either a vector of colors or a function which returns a vector of colors—here I’ve just used an anonymous function to color code based on whether a value is below or above 40:\n\npenguin_flextable_4 |&gt; \n  color(color = \\(x) ifelse(x &lt; 40, \"red\", \"black\"))\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nYou can get more fancy and use a scale from the scales package:\n\npenguin_flextable_4 |&gt; \n  color(color = scales::col_numeric(palette = \"viridis\", domain = c(30, 52)))\n\nWarning: Some values were outside the color scale and will be treated as NA\n\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\npenguin_flextable_4 |&gt; \n  color(color = scales::col_bin(palette = \"viridis\", domain = c(30, 60), bins = 3))\n\nWarning: Some values were outside the color scale and will be treated as NA\n\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nYou can also select rows or columns with the i and j arguments, using formula syntax. To target rows, provide i with a formula to filter through the rows. Here we color in red rows for years greater than 2007:\n\npenguin_flextable_4 |&gt; \n  color(i = ~ year &gt; 2007, color = \"red\" )\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nYou can restrict this to specific columns with the j argument:\n\npenguin_flextable_4 |&gt; \n  color(i = ~ year &gt; 2007, j = c(\"year\", \"Adelie_female\"), color = \"red\" )\n\n\n\n\n\n\n\nyear\nAdelie\nChinstrap\nGentoo\n\n\nfemale\nmale\nfemale\nmale\nfemale\nmale\n\n\n\n\n2007\n37.92\n39.95\n46.57\n50.88\n45.06\n49.00\n\n\n2008\n36.52\n40.60\n46.00\n51.40\n45.30\n48.54\n\n\n2009\n37.41\n40.56\n47.01\n51.10\n46.26\n50.88\n\n\n\n\n\n\nGetting flextables into Word\nThere are three main ways to get a flextable into Word: open a temporary preview file that you can copy from with print(preview = \"docx\"), save to a Word file with save_as_docx(), or insert into an existing Word document with the officer package.\nTemporary Word file\nThis is probably the easiest method. The following code opens a new temporary document in Word (assuming it’s installed on your computer) that contains the flextable object.\n\npenguin_flextable_4 |&gt; \n  print(preview = \"docx\")\n\nThat’s it! You can now copy and paste that table wherever you need. NB: this creates a temporary file which will be deleted when your R session closes, so save any output you want in a separate document.\nSave to a new Word file\nsave_as_docx will do as the name suggests—insert the flextable into a new .docx file whose location you specify:\n\npenguin_flextable_4 |&gt; \n  save_as_docx(path = \"penguin_table.docx\") # I find it necessary to explicitly name the path argument\n\nImport into an existing Word file.\nThe package officer lets you read a Word document into R, manipulate it, and save it again with any additions or changes.\nRead in an existing Word document with officer::read_docx(). Here I’ll read the penguin_table.docx document we created above.:\n\npenguin_doc &lt;- officer::read_docx(\"penguin_table.docx\")\n\nNow add your flextable with flextable::body_add_flextable():\n\npenguin_doc &lt;- flextable::body_add_flextable(penguin_doc, penguin_flextable_4)\n\nAnd finally, save this Word object as a Word document:\n\npenguin_doc |&gt; \n  print(target = \"penguin_table.docx\")"
  },
  {
    "objectID": "posts/tables_for_word_flextable/index.html#footnotes",
    "href": "posts/tables_for_word_flextable/index.html#footnotes",
    "title": "Tables for Word in flextable\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nIf you’re reading this some time in the future, it might be worth checking that issue to see if it’s been resolved.↩︎"
  },
  {
    "objectID": "posts/tables_for_word_flextable/index.html#conclusion",
    "href": "posts/tables_for_word_flextable/index.html#conclusion",
    "title": "Tables for Word in flextable\n",
    "section": "Conclusion",
    "text": "Conclusion\nThat’s it! flextable has a bunch more functionality, but these are the things I find myself using regularly. Check out the flextable page or the flextable book (free online).\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.4.0 (2024-04-24)\n os       macOS Sonoma 14.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2024-05-17\n pandoc   3.2 @ /opt/homebrew/bin/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n           askpass         1.2.0 2023-09-03 CRAN (R 4.4.0)\n               cli         3.6.2 2023-12-11 CRAN (R 4.4.0)\n         codetools        0.2-20 2024-03-31 CRAN (R 4.4.0)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.4.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.4.0)\n              crul         1.4.2 2024-04-09 CRAN (R 4.4.0)\n              curl         5.2.1 2024-03-01 CRAN (R 4.4.0)\n        data.table        1.15.4 2024-03-30 CRAN (R 4.4.0)\n            digest        0.6.35 2024-03-11 CRAN (R 4.4.0)\n             dplyr         1.1.4 2023-11-17 CRAN (R 4.4.0)\n          evaluate          0.23 2023-11-01 CRAN (R 4.4.0)\n             fansi         1.0.6 2023-12-08 CRAN (R 4.4.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.4.0)\n         flextable         0.9.6 2024-05-05 CRAN (R 4.4.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.4.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.4.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.4.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.4.0)\n           gdtools         0.3.7 2024-03-05 CRAN (R 4.4.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.4.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.4.0)\n           ggplot2         3.5.1 2024-04-23 CRAN (R 4.4.0)\n              glue         1.7.0 2024-01-09 CRAN (R 4.4.0)\n                gt        0.10.1 2024-01-17 CRAN (R 4.4.0)\n            gtable         0.3.5 2024-04-22 CRAN (R 4.4.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.4.0)\n         htmltools       0.5.8.1 2024-04-04 CRAN (R 4.4.0)\n       htmlwidgets         1.6.4 2023-12-06 CRAN (R 4.4.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.4.0)\n            httpuv        1.6.15 2024-03-26 CRAN (R 4.4.0)\n          jsonlite         1.8.8 2023-12-04 CRAN (R 4.4.0)\n             knitr          1.46 2024-04-06 CRAN (R 4.4.0)\n             later         1.3.2 2023-12-06 CRAN (R 4.4.0)\n         lifecycle         1.0.4 2023-11-07 CRAN (R 4.4.0)\n         lubridate         1.9.3 2023-09-27 CRAN (R 4.4.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.4.0)\n              mime          0.12 2021-09-28 CRAN (R 4.4.0)\n           munsell         0.5.1 2024-04-01 CRAN (R 4.4.0)\n           officer         0.6.6 2024-05-05 CRAN (R 4.4.0)\n           openssl         2.1.2 2024-04-21 CRAN (R 4.4.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.4.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.4.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.4.0)\n          promises         1.3.0 2024-04-05 CRAN (R 4.4.0)\n             purrr         1.0.2 2023-08-10 CRAN (R 4.4.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.4.0)\n              ragg         1.3.1 2024-05-06 CRAN (R 4.4.0)\n              Rcpp        1.0.12 2024-01-09 CRAN (R 4.4.0)\n             readr         2.1.5 2024-01-10 CRAN (R 4.4.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.4.0)\n             rlang         1.1.3 2024-01-10 CRAN (R 4.4.0)\n         rmarkdown          2.26 2024-03-05 CRAN (R 4.4.0)\n        rstudioapi        0.16.0 2024-03-24 CRAN (R 4.4.0)\n            scales         1.3.0 2023-11-28 CRAN (R 4.4.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.4.0)\n             shiny       1.8.1.1 2024-04-02 CRAN (R 4.4.0)\n           stringi         1.8.4 2024-05-06 CRAN (R 4.4.0)\n           stringr         1.5.1 2023-11-14 CRAN (R 4.4.0)\n       systemfonts         1.0.6 2024-03-07 CRAN (R 4.4.0)\n       textshaping         0.3.7 2023-10-09 CRAN (R 4.4.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.4.0)\n             tidyr         1.3.1 2024-01-24 CRAN (R 4.4.0)\n        tidyselect         1.2.1 2024-03-11 CRAN (R 4.4.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.4.0)\n        timechange         0.3.0 2024-01-18 CRAN (R 4.4.0)\n              tzdb         0.4.0 2023-05-12 CRAN (R 4.4.0)\n              utf8         1.2.4 2023-10-22 CRAN (R 4.4.0)\n              uuid         1.2-0 2024-01-14 CRAN (R 4.4.0)\n             vctrs         0.6.5 2023-12-01 CRAN (R 4.4.0)\n             withr         3.0.0 2024-01-16 CRAN (R 4.4.0)\n              xfun          0.43 2024-03-25 CRAN (R 4.4.0)\n              xml2         1.3.6 2023-12-04 CRAN (R 4.4.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.4.0)\n              yaml         2.3.8 2023-12-11 CRAN (R 4.4.0)\n               zip         2.3.1 2024-01-27 CRAN (R 4.4.0)"
  }
]