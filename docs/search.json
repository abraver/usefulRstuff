[
  {
    "objectID": "posts/janitor/index.html",
    "href": "posts/janitor/index.html",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "",
    "text": "Setup\nlibrary(janitor)\njanitor contains various tools for examining and cleaning dirty data."
  },
  {
    "objectID": "posts/janitor/index.html#cleaning-dirty-data",
    "href": "posts/janitor/index.html#cleaning-dirty-data",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Cleaning dirty data",
    "text": "Cleaning dirty data\n\nClean column names\nLet’s create a df with some poorly-chosen column names:\n\ntest_df &lt;- as.data.frame(matrix(ncol = 6))\nnames(test_df) &lt;- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n\nclean_names() does just as the name implies:\n\ntest_df |&gt; \n  clean_names()\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_name\nabc\npercent_successful_2009\nrepeat_value\nrepeat_value_2\nx\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nThe case argument to clean_names() specifies what case you’d like output names to be in. You can specify any case style that’s available in snakecase::to_any_case(), including “screaming_snake” if you want to be perverse:\n\ntest_df |&gt; \n  clean_names(case = \"screaming_snake\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nFIRST_NAME\nABC\nPERCENT_SUCCESSFUL_2009\nREPEAT_VALUE\nREPEAT_VALUE_2\nX\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nCheck if dfs are row-bind-able\nAlso useful is compare_df_cols which summarizes whether the specified dfs can be row-bound (i.e., have columns of the same names/types):\n\ndf1 &lt;- data.frame(A= 1:2, b = c(\"big\", \"small\"))\ndf2 &lt;- data.frame(a = 10:12, b = c(\"medium\", \"small\", \"big\"), c = 0, stringsAsFactors = TRUE) # here, column b is a factor\ndf3 &lt;- df1 |&gt; \n  dplyr::mutate(b = as.character(b))\n\ncompare_df_cols(df1, df2, df3)\n\n\n\n\n\ncolumn_name\ndf1\ndf2\ndf3\n\n\n\n\na\nNA\ninteger\nNA\n\n\nA\ninteger\nNA\ninteger\n\n\nb\ncharacter\nfactor\ncharacter\n\n\nc\nNA\nnumeric\nNA\n\n\n\n\n\n\nIf you just want a simple TRUE/FALSE value telling you whether the dfs match, you can use compare_df_cols_same():\n\nstr(compare_df_cols_same(df1, df2, df3, verbose = FALSE))\n\n logi FALSE"
  },
  {
    "objectID": "posts/janitor/index.html#examining-data-and-crosstabs",
    "href": "posts/janitor/index.html#examining-data-and-crosstabs",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Examining data and crosstabs",
    "text": "Examining data and crosstabs\njanitor’s version of tables are called tabyls. You can easily generate crosstabs:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island)\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n\n\n\n\nThere are lots of ways to pretty up the output via adorn_* commands, giving things like column or row percentages, optionally with ns in parentheses:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island) |&gt; \n  adorn_totals(\"col\")  |&gt; \n  adorn_percentages(\"row\")  |&gt; \n  adorn_pct_formatting(digits = 2) |&gt; \n  adorn_ns()\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\nTotal\n\n\n\n\nAdelie\n28.95% (44)\n36.84% (56)\n34.21% (52)\n100.00% (152)\n\n\nChinstrap\n0.00% (0)\n100.00% (68)\n0.00% (0)\n100.00% (68)\n\n\nGentoo\n100.00% (124)\n0.00% (0)\n0.00% (0)\n100.00% (124)\n\n\n\n\n\n\nYou can also use the adorn_* functions on regular ol’ dfs:\n\npalmerpenguins::penguins |&gt; \n1  dplyr::sample_n(10) |&gt;\n  dplyr::select(-year) |&gt; \n  adorn_totals(\"row\")\n\n\n1\n\nChoose 10 random rows so this doesn’t print forever\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nGentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n\n\nAdelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n\n\nGentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n\n\nChinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n\n\nAdelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n\n\nGentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n\n\nGentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n\n\nAdelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n\n\nTotal\n-\n398.0\n152.9\n1826\n40575\n-\n\n\n\n\n\n\nCheck out the tabyls vignette for more info.\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-25\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n        package loadedversion       date         source\n            cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n      codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n     colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n         digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n          dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n       evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n          fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n        fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n        forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n       generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n        ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n           glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n            hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n      htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n    htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n        janitor         2.2.0 2023-02-02 CRAN (R 4.3.0)\n       jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n          knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n      lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n      lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n       magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n        munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n         pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n      pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n             R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n          readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n           renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n          rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n      rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n     rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n         scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n    sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n      snakecase        0.11.0 2019-05-25 CRAN (R 4.3.0)\n        stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n        stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n         tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n          tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n     tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n      tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n     timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n           tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n           utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n          vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n          withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n           xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n           yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "This is a collection of R packages, bits of code, and other trivia that I find useful.\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nCategories\n\n\nDate\n\n\n\n\n\n\ndiffobj: Compare two dfs (or other objects)\n\n\ndataframes\n\n\nJun 25, 2023\n\n\n\n\n\njanitor: Clean dirty data, plus improved tables and crosstab\n\n\ndata cleaning\n\n\nJun 25, 2023\n\n\n\n\nthinkr::peep(): See intermediate stages of piped dfs\n\n\ndataframes,piping\n\n\nJun 1, 2023\n\n\n\n\n\n\nNo matching items"
  }
]