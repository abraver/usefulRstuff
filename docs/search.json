[
  {
    "objectID": "posts/janitor/index.html",
    "href": "posts/janitor/index.html",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "",
    "text": "Setup\nlibrary(janitor)\njanitor contains various tools for examining and cleaning dirty data."
  },
  {
    "objectID": "posts/janitor/index.html#cleaning-dirty-data",
    "href": "posts/janitor/index.html#cleaning-dirty-data",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Cleaning dirty data",
    "text": "Cleaning dirty data\n\nClean column names\nLet’s create a df with some poorly-chosen column names:\n\ntest_df &lt;- as.data.frame(matrix(ncol = 6))\nnames(test_df) &lt;- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n\nclean_names() does just as the name implies:\n\ntest_df |&gt; \n  clean_names()\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_name\nabc\npercent_successful_2009\nrepeat_value\nrepeat_value_2\nx\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nThe case argument to clean_names() specifies what case you’d like output names to be in. You can specify any case style that’s available in snakecase::to_any_case(), including “screaming_snake” if you want to be perverse:\n\ntest_df |&gt; \n  clean_names(case = \"screaming_snake\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nFIRST_NAME\nABC\nPERCENT_SUCCESSFUL_2009\nREPEAT_VALUE\nREPEAT_VALUE_2\nX\n\n\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nCheck if dfs are row-bind-able\nAlso useful is compare_df_cols which summarizes whether the specified dfs can be row-bound (i.e., have columns of the same names/types):\n\ndf1 &lt;- data.frame(A= 1:2, b = c(\"big\", \"small\"))\ndf2 &lt;- data.frame(a = 10:12, b = c(\"medium\", \"small\", \"big\"), c = 0, stringsAsFactors = TRUE) # here, column b is a factor\ndf3 &lt;- df1 |&gt; \n  dplyr::mutate(b = as.character(b))\n\ncompare_df_cols(df1, df2, df3)\n\n\n\n\n\ncolumn_name\ndf1\ndf2\ndf3\n\n\n\n\na\nNA\ninteger\nNA\n\n\nA\ninteger\nNA\ninteger\n\n\nb\ncharacter\nfactor\ncharacter\n\n\nc\nNA\nnumeric\nNA\n\n\n\n\n\n\nIf you just want a simple TRUE/FALSE value telling you whether the dfs match, you can use compare_df_cols_same():\n\nstr(compare_df_cols_same(df1, df2, df3, verbose = FALSE))\n\n logi FALSE"
  },
  {
    "objectID": "posts/janitor/index.html#examining-data-and-crosstabs",
    "href": "posts/janitor/index.html#examining-data-and-crosstabs",
    "title": "janitor: Clean dirty data, plus improved tables and crosstab",
    "section": "Examining data and crosstabs",
    "text": "Examining data and crosstabs\njanitor’s version of tables are called tabyls. You can easily generate crosstabs:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island)\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n\n\n\n\nThere are lots of ways to pretty up the output via adorn_* commands, giving things like column or row percentages, optionally with ns in parentheses:\n\npalmerpenguins::penguins |&gt; \n  tabyl(species, island) |&gt; \n  adorn_totals(\"col\")  |&gt; \n  adorn_percentages(\"row\")  |&gt; \n  adorn_pct_formatting(digits = 2) |&gt; \n  adorn_ns()\n\n\n\n\n\nspecies\nBiscoe\nDream\nTorgersen\nTotal\n\n\n\n\nAdelie\n28.95% (44)\n36.84% (56)\n34.21% (52)\n100.00% (152)\n\n\nChinstrap\n0.00% (0)\n100.00% (68)\n0.00% (0)\n100.00% (68)\n\n\nGentoo\n100.00% (124)\n0.00% (0)\n0.00% (0)\n100.00% (124)\n\n\n\n\n\n\nYou can also use the adorn_* functions on regular ol’ dfs:\n\npalmerpenguins::penguins |&gt; \n1  dplyr::sample_n(10) |&gt;\n  dplyr::select(-year) |&gt; \n  adorn_totals(\"row\")\n\n\n1\n\nChoose 10 random rows so this doesn’t print forever\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nGentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n\n\nAdelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n\n\nGentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n\n\nChinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n\n\nAdelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n\n\nGentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n\n\nGentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n\n\nAdelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n\n\nTotal\n-\n398.0\n152.9\n1826\n40575\n-\n\n\n\n\n\n\nCheck out the tabyls vignette for more info.\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-25\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n        package loadedversion       date         source\n            cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n      codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n     colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n         digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n          dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n       evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n          fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n        fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n        forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n       generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n        ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n           glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n            hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n      htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n    htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n        janitor         2.2.0 2023-02-02 CRAN (R 4.3.0)\n       jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n          knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n      lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n      lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n       magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n        munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n         pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n      pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n             R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n          readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n           renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n          rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n      rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n     rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n         scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n    sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n      snakecase        0.11.0 2019-05-25 CRAN (R 4.3.0)\n        stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n        stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n         tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n          tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n     tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n      tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n     timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n           tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n           utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n          vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n          withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n           xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n           yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "This is a collection of R packages, bits of code, and other trivia that I find useful. It was originally written for myself, but hopefully others will find some useful tidbits.\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nCategories\n\n\nModified\n\n\n\n\n\n\nkhroma and colorblindr: Tools for colorblind-friendly plots\n\n\nvisualization,colors\n\n\n7/4/23\n\n\n\n\nPaginate a faceted graph and save as a single multi-page PDF\n\n\nvisualization\n\n\n7/1/23\n\n\n\n\nUpgrading R without losing all your packages\n\n\nupgrading,package management\n\n\n6/30/23\n\n\n\n\nInteractive plots with ggiraph\n\n\nvisualization,interactivity\n\n\n6/30/23\n\n\n\n\nSummary statistics for dfs with skimr\n\n\ndataframes,summarizing\n\n\n6/29/23\n\n\n\n\ndplyr::glimpse(): Prettier than str()\n\n\ndataframes,summarizing\n\n\n6/26/23\n\n\n\n\nfuzzyjoin: Join dfs with inexact matching\n\n\ndataframes,joins\n\n\n6/26/23\n\n\n\n\n\njanitor: Clean dirty data, plus improved tables and crosstab\n\n\ndata cleaning\n\n\n6/26/23\n\n\n\n\ndiffobj: Compare two dfs (or other objects)\n\n\ndataframes\n\n\n6/25/23\n\n\n\n\nthinkr::peep(): See intermediate stages of piped dfs\n\n\ndataframes,piping\n\n\n6/25/23\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/thinkr_peep/index.html",
    "href": "posts/thinkr_peep/index.html",
    "title": "thinkr::peep(): See intermediate stages of piped dfs",
    "section": "",
    "text": "Setup\nlibrary(tidyverse)\nlibrary(thinkr)\n\n\nInsert thinkr::peep(head) into a df pipeline to print a few rows at a particular intermediate stage in the pipeline. Here it prints a few lines of the df before it gets summarized:\n\npalmerpenguins::penguins |&gt; \n  peep(head) |&gt;\n1  group_by(species) |&gt;\n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\n\n1\n\nHow convenient that the base R pipe looks like a penguin.\n\n\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081\n\n\n\n\n\n\nYou can use multiple functions, like head and tail to see two views of the intermediate step; verbose = TRUE prints the functions used for these peeps:\n\npalmerpenguins::penguins |&gt;\n  peep(head, tail, verbose = TRUE) |&gt; \n  group_by(species) |&gt; \n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\nhead(.)\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\ntail(.)\n\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081\n\n\n\n\n\n\nAnd you can include arguments to functions inside peep() with dot syntax:\n\npalmerpenguins::penguins %&gt;% \n  peep(head(., n = 7)) |&gt; \n  group_by(species) |&gt; \n  summarize(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE)))\n\n# A tibble: 7 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n7 Adelie  Torgersen           38.9          17.8               181        3625\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\n38.79139\n18.34636\n189.9536\n3700.662\n2008.013\n\n\nChinstrap\n48.83382\n18.42059\n195.8235\n3733.088\n2007.971\n\n\nGentoo\n47.50488\n14.98211\n217.1870\n5076.016\n2008.081\n\n\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-26\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n           askpass           1.1 2019-01-13 CRAN (R 4.3.0)\n        assertthat         0.2.1 2019-03-21 CRAN (R 4.3.0)\n            cachem         1.0.8 2023-05-01 CRAN (R 4.3.0)\n             callr         3.7.3 2022-11-02 CRAN (R 4.3.0)\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul           1.3 2022-09-03 CRAN (R 4.3.1)\n              curl         5.0.0 2023-01-12 CRAN (R 4.3.0)\n          devtools         2.4.5 2022-10-11 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n                fs         1.6.2 2023-04-25 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n          lazyeval         0.2.2 2019-03-15 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n           memoise         2.0.1 2021-11-26 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n            miniUI       0.1.1.1 2018-05-18 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n           officer         0.6.2 2023-03-28 CRAN (R 4.3.0)\n           openssl         2.0.6 2023-03-09 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n          pkgbuild         1.4.0 2022-11-27 CRAN (R 4.3.1)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n           pkgload         1.3.2 2022-11-16 CRAN (R 4.3.0)\n       prettyunits         1.1.1 2020-01-24 CRAN (R 4.3.0)\n          processx         3.8.1 2023-04-18 CRAN (R 4.3.0)\n           profvis         0.3.7 2020-11-02 CRAN (R 4.3.1)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n                ps         1.7.5 2023-04-18 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n           remotes         2.4.2 2021-11-30 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n               rvg         0.3.2 2023-01-07 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            thinkr          0.16 2022-08-22 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n        urlchecker         1.0.1 2021-11-30 CRAN (R 4.3.0)\n           usethis         2.1.6 2022-05-25 CRAN (R 4.3.1)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n              uuid         1.1-0 2022-04-19 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n              xml2         1.3.4 2023-04-27 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)\n               zip         2.3.0 2023-04-17 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/diffobj/index.html",
    "href": "posts/diffobj/index.html",
    "title": "\ndiffobj: Compare two dfs (or other objects)",
    "section": "",
    "text": "What’s the difference between two dfs?\ndiffobj::diffPrint() gives a handy visual way to check differences:\n\nlibrary(diffobj)\n\na &lt;- b &lt;- matrix(1:100, ncol=2)\na &lt;- a[-20,]\nb &lt;- b[-45,]\nb[c(18, 44)] &lt;- 999\n\ndiffPrint(target=a, current=b)\n\n&lt; a                &gt; b              \n@@ 17,6 @@         @@ 17,7 @@       \n~       [,1] [,2]  ~       [,1] [,2]\n  [16,]   16   66    [16,]   16   66\n  [17,]   17   67    [17,]   17   67\n&lt; [18,]   18   68  &gt; [18,]  999   68\n  [19,]   19   69    [19,]   19   69\n~                  &gt; [20,]   20   70\n  [20,]   21   71    [21,]   21   71\n  [21,]   22   72    [22,]   22   72\n@@ 42,6 @@         @@ 43,5 @@       \n  [41,]   42   92    [42,]   42   92\n  [42,]   43   93    [43,]   43   93\n&lt; [43,]   44   94  &gt; [44,]  999   94\n&lt; [44,]   45   95  ~                \n  [45,]   46   96    [45,]   46   96\n  [46,]   47   97    [46,]   47   97\n\n\n\n(In RStudio, this is shown in a colorful manner in the Viewer)\nThis also works for other types of objects, such as character vectors:\n\ndiffPrint(letters[1:3], c(\"a\", \"B\", \"c\"))\n\n&lt; letters[1:3]     &gt; c(\"a\", \"B\", \"..\n@@ 1 @@            @@ 1 @@          \n&lt; [1] \"a\" \"b\" \"c\"  &gt; [1] \"a\" \"B\" \"c\"\n\n\nFor more details, see the Introduction to diffobjj vignette, or the diffobj github rep.\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-25\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n     diffobj         0.3.5 2021-10-05 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n    ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggExtra        0.10.0 2022-03-23 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n      httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n    jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n       later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n        mime          0.12 2021-09-28 CRAN (R 4.3.0)\n      miniUI       0.1.1.1 2018-05-18 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n    promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n        Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n   rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n       shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n       vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n      xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html",
    "href": "posts/fuzzyjoin/index.html",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "",
    "text": "Setup\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-string-distance",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-string-distance",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by string distance",
    "text": "Join dfs by string distance\nSometimes you want to join dfs on fuzzy criteria. That’s where fuzzyjoin comes in. Consider this example lifted partially from the documentation:\nSet up a df with some typos. We’ll join this to ggplot2::diamonds by cut, which has levels: Fair, Good, Very Good, Premium, Ideal.\n\n# Create a dataframe with some typos\nd &lt;- data.frame(approximate_name = c(\"Idea\", \"Premiums\", \"Premioom\",\n                                     \"VeryGood\", \"VeryGood\", \"Faiir\"),\n                type = 1:6)\n\nA regular inner join finds no matches, due to the typos:\n\ninner_join(diamonds, d, by = c(cut = \"approximate_name\")) |&gt; \n  nrow()\n\n[1] 0\n\n\nstringdist_inner_join() however will match strings based on any of the methods available in the stringdist package (e.g. Levenshtein distance, Jaccard distance, etc).\n\nfuzzyjoin::stringdist_inner_join(diamonds, d,\n                                 by = c(cut = \"approximate_name\"),\n1                                 method = \"lv\",\n                                 max_dist = 3,\n                                 distance_col = \"distance\") |&gt; \n2  relocate(approximate_name, .after = \"cut\") |&gt;\n  head(10)\n\n\n1\n\nLevenshtein distance\n\n2\n\nMove these columns closer together for easier visual comparison\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\napproximate_name\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\ntype\ndistance\n\n\n\n\n0.23\nIdeal\nIdea\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n1\n1\n\n\n0.21\nPremium\nPremiums\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n2\n1\n\n\n0.21\nPremium\nPremioom\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n3\n2\n\n\n0.29\nPremium\nPremiums\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n2\n1\n\n\n0.29\nPremium\nPremioom\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n3\n2\n\n\n0.24\nVery Good\nVeryGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n4\n1\n\n\n0.24\nVery Good\nVeryGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n5\n1\n\n\n0.24\nVery Good\nVeryGood\nI\nVVS1\n62.3\n57\n336\n3.95\n3.98\n2.47\n4\n1\n\n\n0.24\nVery Good\nVeryGood\nI\nVVS1\n62.3\n57\n336\n3.95\n3.98\n2.47\n5\n1\n\n\n0.26\nVery Good\nVeryGood\nH\nSI1\n61.9\n55\n337\n4.07\n4.11\n2.53\n4\n1"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-regex-matches",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-regex-matches",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by regex matches",
    "text": "Join dfs by regex matches\nAlso extremely useful are the regex_*_join functions, which join based on whether there is a regex match between columns. (This example also from the documentation)\n\nd &lt;- data.frame(regex_name = c(\"^Idea\", \"mium\", \"Good\"), type = 1:3)\n\nfuzzyjoin::regex_inner_join(diamonds, d, by = c(cut = \"regex_name\")) |&gt; \n  relocate(regex_name, .after = cut) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\nregex_name\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\ntype\n\n\n\n\n0.23\nIdeal\n^Idea\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n1\n\n\n0.21\nPremium\nmium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n2\n\n\n0.23\nGood\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n3\n\n\n0.29\nPremium\nmium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n2\n\n\n0.31\nGood\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n3\n\n\n0.24\nVery Good\nGood\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n3"
  },
  {
    "objectID": "posts/fuzzyjoin/index.html#join-dfs-by-absolute-difference-between-columns",
    "href": "posts/fuzzyjoin/index.html#join-dfs-by-absolute-difference-between-columns",
    "title": "fuzzyjoin: Join dfs with inexact matching",
    "section": "Join dfs by absolute difference between columns",
    "text": "Join dfs by absolute difference between columns\nSay you want to join by two columns so long as they are equal within a certain degree of tolerance. Here we join so long as sepal_lengths$Sepal.Length is within 0.5 of the iris$Sepal.Length:\n\nsepal_lengths &lt;- data.frame(Sepal.Length = c(5, 6, 7), Type = 1:3)\n\nfuzzyjoin::difference_inner_join(iris, sepal_lengths,\n                                 max_dist = 0.5,\n                                 distance_col = \"distance\") |&gt; \n  relocate(Sepal.Length.x, .after = Sepal.Length.y) |&gt; \n  head()\n\nJoining by: \"Sepal.Length\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\nSepal.Length.y\nSepal.Length.x\nType\ndistance\n\n\n\n\n3.5\n1.4\n0.2\nsetosa\n5\n5.1\n1\n0.1\n\n\n3.0\n1.4\n0.2\nsetosa\n5\n4.9\n1\n0.1\n\n\n3.2\n1.3\n0.2\nsetosa\n5\n4.7\n1\n0.3\n\n\n3.1\n1.5\n0.2\nsetosa\n5\n4.6\n1\n0.4\n\n\n3.6\n1.4\n0.2\nsetosa\n5\n5.0\n1\n0.0\n\n\n3.9\n1.7\n0.4\nsetosa\n5\n5.4\n1\n0.4\n\n\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-26\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n   fuzzyjoin         0.1.6 2020-05-15 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n    jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n   rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n       vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/skimr/index.html",
    "href": "posts/skimr/index.html",
    "title": "Summary statistics for dfs with skimr\n",
    "section": "",
    "text": "Setuplibrary(dplyr)\n\n\nskimr::skim() provides handy summary statistics for dfs and related objects, including little sparkline-style histograms right in the output.\n\nlibrary(skimr)\n\npalmerpenguins::penguins |&gt; \n  skim()\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n  numeric                  5                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean      sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46    32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97    13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1    172    190    197  \n4 body_mass_g               2         0.994 4202.  802.    2700   3550   4050  \n5 year                      0         1     2008.    0.818 2007   2007   2008  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n5 2009   2009   ▇▁▇▁▇\n\n\nIt also handles grouped data nicely:\n\npalmerpenguins::penguins |&gt; \n  group_by(species) |&gt; \n  skim()\n\n\n\n── Data Summary ────────────────────────\n                           Values                      \nName                       group_by(palmerpenguins::...\nNumber of rows             344                         \nNumber of columns          8                           \n_______________________                                \nColumn type frequency:                                 \n  factor                   2                           \n  numeric                  5                           \n________________________                               \nGroup variables            species                     \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable species   n_missing complete_rate ordered n_unique\n1 island        Adelie            0         1     FALSE          3\n2 island        Chinstrap         0         1     FALSE          1\n3 island        Gentoo            0         1     FALSE          1\n4 sex           Adelie            6         0.961 FALSE          2\n5 sex           Chinstrap         0         1     FALSE          2\n6 sex           Gentoo            5         0.960 FALSE          2\n  top_counts               \n1 Dre: 56, Tor: 52, Bis: 44\n2 Dre: 68, Bis: 0, Tor: 0  \n3 Bis: 124, Dre: 0, Tor: 0 \n4 fem: 73, mal: 73         \n5 fem: 34, mal: 34         \n6 mal: 61, fem: 58         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     species   n_missing complete_rate   mean      sd     p0\n 1 bill_length_mm    Adelie            1         0.993   38.8   2.66    32.1\n 2 bill_length_mm    Chinstrap         0         1       48.8   3.34    40.9\n 3 bill_length_mm    Gentoo            1         0.992   47.5   3.08    40.9\n 4 bill_depth_mm     Adelie            1         0.993   18.3   1.22    15.5\n 5 bill_depth_mm     Chinstrap         0         1       18.4   1.14    16.4\n 6 bill_depth_mm     Gentoo            1         0.992   15.0   0.981   13.1\n 7 flipper_length_mm Adelie            1         0.993  190.    6.54   172  \n 8 flipper_length_mm Chinstrap         0         1      196.    7.13   178  \n 9 flipper_length_mm Gentoo            1         0.992  217.    6.48   203  \n10 body_mass_g       Adelie            1         0.993 3701.  459.    2850  \n11 body_mass_g       Chinstrap         0         1     3733.  384.    2700  \n12 body_mass_g       Gentoo            1         0.992 5076.  504.    3950  \n13 year              Adelie            0         1     2008.    0.822 2007  \n14 year              Chinstrap         0         1     2008.    0.863 2007  \n15 year              Gentoo            0         1     2008.    0.792 2007  \n      p25    p50    p75   p100 hist \n 1   36.8   38.8   40.8   46   ▁▆▇▆▁\n 2   46.3   49.6   51.1   58   ▂▇▇▅▁\n 3   45.3   47.3   49.6   59.6 ▃▇▆▁▁\n 4   17.5   18.4   19     21.5 ▂▆▇▃▁\n 5   17.5   18.4   19.4   20.8 ▅▇▇▆▂\n 6   14.2   15     15.7   17.3 ▅▇▇▆▂\n 7  186    190    195    210   ▁▆▇▅▁\n 8  191    196    201    212   ▁▅▇▅▂\n 9  212    216    221    231   ▂▇▇▆▃\n10 3350   3700   4000   4775   ▅▇▇▃▂\n11 3488.  3700   3950   4800   ▁▅▇▃▁\n12 4700   5000   5500   6300   ▃▇▇▇▂\n13 2007   2008   2009   2009   ▇▁▇▁▇\n14 2007   2008   2009   2009   ▇▁▆▁▇\n15 2007   2008   2009   2009   ▆▁▇▁▇\n\n\nAnd finally, since the output of skim() has class data.frame, you can include it in a pipeline, e.g. to filter by one of the summary statistics:\n\npalmerpenguins::penguins |&gt; \n  skim() |&gt; \n  filter(numeric.sd &gt; 1)\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  numeric                  4                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean     sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46   32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97   13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1   172    190    197  \n4 body_mass_g               2         0.994 4202.  802.   2700   3550   4050  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n\n\n\npalmerpenguins::penguins |&gt; \n  skim() |&gt; \n  filter(factor.n_unique &gt; 1)\n\n\n\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n\n\n\nTo refer to the summary statistic columns, be sure to preface the column name with the variable type, e.g. factor. or numeric. as appropriate. For a list of variable types and the default summary statistics for each:\n\nget_default_skimmer_names()\n\n$AsIs\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$character\n[1] \"min\"        \"max\"        \"empty\"      \"n_unique\"   \"whitespace\"\n\n$complex\n[1] \"mean\"\n\n$Date\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$difftime\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$factor\n[1] \"ordered\"    \"n_unique\"   \"top_counts\"\n\n$haven_labelled\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$list\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$logical\n[1] \"mean\"  \"count\"\n\n$numeric\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$POSIXct\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$Timespan\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$ts\n [1] \"start\"      \"end\"        \"frequency\"  \"deltat\"     \"mean\"      \n [6] \"sd\"         \"min\"        \"max\"        \"median\"     \"line_graph\"\n\n\nFinally, if you want to print the summary, but return the original df, use skim_tee().\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-26\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n   base64enc         0.1-3 2015-07-28 CRAN (R 4.3.0)\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n    jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n        repr         1.1.6 2023-01-26 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n   rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n       skimr         2.1.5 2022-12-23 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.3.0 2022-03-28 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n       vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/glimpse/index.html",
    "href": "posts/glimpse/index.html",
    "title": "\ndplyr::glimpse(): Prettier than str()\n",
    "section": "",
    "text": "Instead of str(df) to see the structure of a dataframe, try dplyr::glimpse()1 instead. It gives a horizontal output and shows more data than fits with str():\ndplyr::glimpse(palmerpenguins::penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\nYou can also force more data to be shown with the width option:\ndplyr::glimpse(palmerpenguins::penguins, width = 200)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgers…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, 34.6, 36.6, 38.7, 42.5, 34.4, 46.0, 37.8, 37.7, 35.9, 38.2, 38.8, 35.3, 40.6, 40.5, 37.9, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, 21.1, 17.8, 19.0, 20.7, 18.4, 21.5, 18.3, 18.7, 19.2, 18.1, 17.2, 18.9, 18.6, 17.9, 18.6, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195, 197, 184, 194, 174, 180, 189, 185, 180, 187, 183, 187, 172, 180, 178, 178, 188, 184, 195…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, 4400, 3700, 3450, 4500, 3325, 4200, 3400, 3600, 3800, 3950, 3800, 3800, 3550, 3200, 3150, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male, NA, NA, NA, NA, female, male, male, female, female, male, female, male, female, male, female, male, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "posts/glimpse/index.html#footnotes",
    "href": "posts/glimpse/index.html#footnotes",
    "title": "\ndplyr::glimpse(): Prettier than str()\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nTechnically, glimpse is from the pillar package, but it’s re-exported by dplyr, which I usually have loaded anyway.↩︎"
  },
  {
    "objectID": "posts/ggiraph/index.html",
    "href": "posts/ggiraph/index.html",
    "title": "Interactive plots with ggiraph\n",
    "section": "",
    "text": "ggiraph allows for the creation of interactive plots in documents that will output as HTML or in Shiny. In static HTML pages, ggiraph allows for tooltips, mouseover highlighting, and JavaScript on click. In Shiny documents there is additional interactivity available—but since this document is static HTML, I won’t cover these here.\n(For more details, see the ggiraph overview, and for even more details, see the ggiraph book; some examples here come from those sources.)\n(You may also be interested in the plotly package as another option for adding interactivity to plots.)"
  },
  {
    "objectID": "posts/ggiraph/index.html#footnotes",
    "href": "posts/ggiraph/index.html#footnotes",
    "title": "Interactive plots with ggiraph\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nFor similar functionality in static graphs (i.e., highlighting one particular group), the gghighlight package.↩︎"
  },
  {
    "objectID": "posts/ggiraph/index.html#simple-example",
    "href": "posts/ggiraph/index.html#simple-example",
    "title": "Interactive plots with ggiraph\n",
    "section": "Simple example",
    "text": "Simple example\nAs a simple example, here is a plot of the palmerpenguins dataset, showing bill_depth_mm vs. bill_length_mm; species are shown by color, and hovering over a point shows which island the sample was collected on (and highlights all other points from that island):\n\nlibrary(ggiraph)\nlibrary(ggplot2)\nlibrary(palmerpenguins) # Load penguins dataset\n\nplot_1 &lt;- penguins |&gt; \n  ggplot(\n  aes(\n    x = bill_depth_mm, y = bill_length_mm,\n    tooltip = paste(\"Island:\", island),\n    data_id = island, color = species\n    )) +\n  geom_point_interactive(\n     hover_nearest = TRUE\n  )\n\ngirafe(ggobj = plot_1)\n\n\n\n\n\nThe data_id argument is how items will be grouped for tooltips and hover effects—here, we want all the dots from the same island to behave together.\nNote, too, the ggobj argument to girafe(). The actual first argument to girafe() is not a ggplot object; this means the ggobj argument needs to be called explicitly, and also makes piping into girafe a bit annoying (hence saving the plot to plot_1 and referring to that within the girafe() call."
  },
  {
    "objectID": "posts/ggiraph/index.html#slightly-more-complicated-example",
    "href": "posts/ggiraph/index.html#slightly-more-complicated-example",
    "title": "Interactive plots with ggiraph\n",
    "section": "Slightly more complicated example",
    "text": "Slightly more complicated example\nIn this slightly more complicated example, the weight of chicks is shown over time. Hovering over a line highlights all chicks in that diet (and dims those in other diets)1, and shows the chick number in a tooltip.\nThe styling of moused-over elements is controlled with the css argument to opts_hover (which is called inside girafe()). I like making non-moused-over elements gray (in opts_hover_inv) and leaving the moused-over elements with their original color by specifiying css=\"\".\n\nplot_2 &lt;- ChickWeight |&gt;\n  ggplot(\n  aes(\n    x = Time, y = weight, color = Diet,\n    group = Chick,\n    tooltip = paste0(\"Diet \", Diet, \" (Chick \", Chick, \")\"),\n    data_id = Diet\n    )) +\n  geom_line_interactive(\n     hover_nearest = TRUE\n  )\n\ngirafe(ggobj = plot_2,\n      options = list(\n        opts_hover(css = \"\"), # Don't change CSS for selected group\n        opts_hover_inv(css = \"opacity: 0.1\"), # CSS for other groups\n        opts_toolbar(saveaspng = FALSE) # Don't include save button\n      ))"
  },
  {
    "objectID": "posts/ggiraph/index.html#ggiraph",
    "href": "posts/ggiraph/index.html#ggiraph",
    "title": "Interactive plots with ggiraph\n",
    "section": "",
    "text": "ggiraph allows for the creation of interactive plots in documents that will output as HTML or in Shiny. In static HTML pages, ggiraph allows for tooltips, mouseover highlighting, and JavaScript on click. In Shiny documents there is additional interactivity available—but since this document is static HTML, I won’t cover these here.\n(For more details, see the ggiraph overview, and for even more details, see the ggiraph book; some examples here come from those sources.)\n(You may also be interested in the plotly package as another option for adding interactivity to plots.)"
  },
  {
    "objectID": "posts/ggiraph/index.html#additional-options",
    "href": "posts/ggiraph/index.html#additional-options",
    "title": "Interactive plots with ggiraph\n",
    "section": "Additional options",
    "text": "Additional options\nJavascript on click\nThe onclick aesthetic allows for execution of JavaScript on click. This is probably more useful in a Shiny project, but it does work even on static HTML pages. Here we get an alert when we click:\n\nplot_3 &lt;- penguins |&gt; \n  ggplot(aes(x = species, y = bill_length_mm, fill = island\n             # tooltip = island,\n             # data_id = island,\n             # onclick = sprintf('alert(\"Island: %s | Species: %s\");', island, species)\n             )\n         ) +\n  geom_col()\n\ngirafe(ggobj = plot_3,\n       options = list(\n         opts_hover(css = \"stroke: black\"), # CSS for selected group\n         opts_hover_inv(css = \"fill: gray\"), # CSS for other groups\n         opts_toolbar(saveaspng = FALSE) # Don't include save button\n       ))\n\n\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-29\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date                             source\n          asbutils    0.0.0.9001 2023-06-29 local (~/Dropbox/R stuff/asbutils)\n               cli         3.6.1 2023-03-23                     CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01                     CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23                     CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29                     CRAN (R 4.3.0)\n              crul           1.3 2022-09-03                     CRAN (R 4.3.1)\n              curl         5.0.0 2023-01-12                     CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11                     CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20                     CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29                     CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05                     CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18                     CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11                     CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22                     CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06                     CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24                     CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01                     CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15                     CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01                     CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27                     CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05                     CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08                     CRAN (R 4.3.0)\n           ggiraph         0.8.7 2023-03-17                     CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03                     CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24                     CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21                     CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06                     CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23                     CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17                     CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10                     CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11                     CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06                     CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25                     CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20                     CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02                     CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07                     CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30                     CRAN (R 4.3.0)\n              mime          0.12 2021-09-28                     CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12                     CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15                     CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22                     CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22                     CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11                     CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10                     CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19                     CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22                     CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06                     CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28                     CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26                     CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22                     CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22                     CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20                     CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06                     CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15                     CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11                     CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20                     CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10                     CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31                     CRAN (R 4.3.0)\n              uuid         1.1-0 2022-04-19                     CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14                     CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03                     CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20                     CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21                     CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23                     CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/ggiraph/index.html#javascript-on-click",
    "href": "posts/ggiraph/index.html#javascript-on-click",
    "title": "Interactive plots with ggiraph\n",
    "section": "Javascript on click",
    "text": "Javascript on click\nThe onclick aesthetic allows for execution of JavaScript on click. This is probably more useful in a Shiny project, but it does work even on static HTML pages. Here we get an alert when we click:\n\nplot_3 &lt;- penguins |&gt; \n  ggplot(aes(x = species, fill = island,\n             tooltip = sprintf('Island: %s | Species: %s', island, species),\n             data_id = island,\n             onclick = sprintf('alert(\"Island: %s | Species: %s\");', island, species)\n             )\n         ) +\n  geom_bar_interactive()\n\ngirafe(ggobj = plot_3,\n       options = list(\n         opts_hover(css = \"\"), # Don't change CSS for selected group\n         opts_hover_inv(css = \"fill: gray\"), # CSS for non-selected groups\n         opts_toolbar(saveaspng = FALSE) # Don't include save button\n       )\n)\n\n\n\n\n\n```"
  },
  {
    "objectID": "posts/upgrading_R/index.html",
    "href": "posts/upgrading_R/index.html",
    "title": "Upgrading R without losing all your packages",
    "section": "",
    "text": "If you upgrade R to a new major or minor release (e.g. 4.0 or 4.1, but not 4.1.1), your library of installed packages doesn’t come along for the ride."
  },
  {
    "objectID": "posts/upgrading_R/index.html#before-you-upgrade",
    "href": "posts/upgrading_R/index.html#before-you-upgrade",
    "title": "Upgrading R without losing all your packages",
    "section": "Before you upgrade",
    "text": "Before you upgrade\nBefore you upgrade, you should make a list of all of your installed packages—this is easy with sessioninfo::package_info(\"installed\"). If you’ve got packages installed from multiple sources (like CRAN and also Github), it’s best to save these as separate lists to facilitate automated reinstallation of these grouped by source:\n\nlibrary(tidyverse)\n\n# Figure out what's installed\ninstalled_packages &lt;- sessioninfo::package_info(\"installed\") |&gt; \n  mutate(\"where_from\" = case_when(\n    str_detect(source, \"CRAN\") ~ \"CRAN\",\n    str_detect(source, \"Github\") ~ \"Github\",\n    .default = \"other\" # catch any packages from other sources;\n                       # not automatically installed below\n    )\n  ) |&gt; \n  nest(.by = where_from)\n\n# Where to write the lists of packages.  Change as needed\nfile_location &lt;- fs::path(\"~/Desktop/tmp/\")\n\n# Write these lists to disk\ninstalled_packages %&gt;% \n  pwalk(function(where_from, data) {\n    write_csv(data,\n              file = fs::path(file_location,\n                              paste0(where_from, \"_packages\"),\n                              ext = \"csv\"))\n  })"
  },
  {
    "objectID": "posts/upgrading_R/index.html#after-you-upgrade",
    "href": "posts/upgrading_R/index.html#after-you-upgrade",
    "title": "Upgrading R without losing all your packages",
    "section": "After you upgrade",
    "text": "After you upgrade\nThen, after you upgrade R, you can re-install the packages from these lists:\n\n# Install manually some things we'll need since they won't be installed anymore\ninstall.packages(c(\"remotes\", \"dplyr\", \"stringr\"))\n\nfile_location &lt;- \"~/Desktop/tmp/\" # Change as needed\n\n# Install CRAN packages\nCRAN_packages &lt;- read.csv(paste0(file_location, \"CRAN_packages\", \".csv\"))\nremotes::install_cran(CRAN_packages$package)\n\n# Install Github packages\ngithub_packages &lt;- read.csv(paste0(file_location, \"Github_packages\", \".csv\")) |&gt;\n  dplyr::mutate(github_source = stringr::str_extract(source,\n      \"(?&lt;=Github \\\\().*(?=@)\")) # Get the username and repo name\nremotes::install_github(github_packages$github_source)\n\nNB: If you have locally installed packages, or packages from another source, these aren’t automatically reinstalled with the code above, but are listed in other_packages.csv.\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-06-30\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n     package loadedversion       date         source\n         bit         4.0.5 2022-11-15 CRAN (R 4.3.0)\n       bit64         4.0.5 2020-08-30 CRAN (R 4.3.0)\n      cachem         1.0.8 2023-05-01 CRAN (R 4.3.0)\n       callr         3.7.3 2022-11-02 CRAN (R 4.3.0)\n         cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n   codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n  colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n      crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n    devtools         2.4.5 2022-10-11 CRAN (R 4.3.0)\n      digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n       dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n    ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n    evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n       fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n     fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n     forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n          fs         1.6.2 2023-04-25 CRAN (R 4.3.0)\n    generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n     ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n        glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n      gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n         hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n   htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n      httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n    jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n       knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n       later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n   lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n   lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n    magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n     memoise         2.0.1 2021-11-26 CRAN (R 4.3.0)\n        mime          0.12 2021-09-28 CRAN (R 4.3.0)\n      miniUI       0.1.1.1 2018-05-18 CRAN (R 4.3.0)\n     munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n      pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n    pkgbuild         1.4.2 2023-06-26 CRAN (R 4.3.0)\n   pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n     pkgload         1.3.2 2022-11-16 CRAN (R 4.3.0)\n prettyunits         1.1.1 2020-01-24 CRAN (R 4.3.0)\n    processx         3.8.1 2023-04-18 CRAN (R 4.3.0)\n     profvis         0.3.8 2023-05-02 CRAN (R 4.3.0)\n    promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n          ps         1.7.5 2023-04-18 CRAN (R 4.3.0)\n       purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n          R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n        Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n       readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n     remotes         2.4.2 2021-11-30 CRAN (R 4.3.0)\n        renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n       rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n   rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n  rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n      scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n       shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n     stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n     stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n      tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n       tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n  tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n   tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n  timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n        tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n  urlchecker         1.0.1 2021-11-30 CRAN (R 4.3.0)\n     usethis         2.2.1 2023-06-23 CRAN (R 4.3.0)\n        utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n       vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n       vroom         1.6.3 2023-04-28 CRAN (R 4.3.0)\n       withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n        xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n      xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n        yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  },
  {
    "objectID": "posts/paginate_faceted_graphs/index.html",
    "href": "posts/paginate_faceted_graphs/index.html",
    "title": "Paginate a faceted graph and save as a single multi-page PDF",
    "section": "",
    "text": "When you have a plot with just a few facets, it’s easy to fit them all on a single page. But what if you have a whole bunch of facets that you want to visualize? For example, the USArrests dataset has data from all 50 US states.\nIf we just use the usual facet_wrap or facet_grid from ggplot2, you end up with one massive, smooshed-together image:\nlibrary(tidyverse)\n\nplot_1 &lt;- USArrests |&gt;  # dataset on US arrests\n  rownames_to_column(\"State\") |&gt;   # This is just so we can see the state names\n  ggplot(aes(x = UrbanPop, y = Murder)) +\n  geom_point()  +\n  facet_wrap(~ State,\n             nrow = 5, ncol = 10)\n\nplot_1\nThe ggforce library, among its many useful functions, includes facet_wrap_paginate and facet_grid_paginate. These work like facet_wrap and facet_grid, but take an additional page argument. Here we specify that we want 4 rows and 5 columns per page, so for 50 states there will be 2 full pages plus one page with the remaining 10 states:\nlibrary(ggforce)\n\nplot_2 &lt;- plot_1  +\n  facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = 2)\n\nplot_2\nNote that we had to specify which page we wanted to print. We can then easily put this into a loop to generate all the necessary pages. The helpful n_pages() will count the pages needed, which we can then use in a loop. This gives us 3 separate plots.\nplot_pages &lt;- plot_2 |&gt; \n  n_pages()\n\nfor (i in 1:plot_pages) {\n  print(\n    plot_1 + facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = i)\n  )  \n}\nThat’s better, but for inclusion in a longer document or for sharing the plot, you may want all three pages in a single PDF. This can be accomplished by calling pdf() before the loop and dev.off() after.1\npdf('many_plots.pdf', width = 11, height = 8.5) #start building pdf\n  for (i in 1:plot_pages) {\n    print( # don't forget this\n      plot_1 +\n      facet_wrap_paginate(~State, nrow = 4, ncol = 5, page = i)\n    )\n  }\ndev.off() # end building pdf\nThe resulting PDF is a single file with 3 pages, as we expect.\n(This post was inspired by this conversation on StackOverflow.)"
  },
  {
    "objectID": "posts/paginate_faceted_graphs/index.html#footnotes",
    "href": "posts/paginate_faceted_graphs/index.html#footnotes",
    "title": "Paginate a faceted graph and save as a single multi-page PDF",
    "section": "Footnotes",
    "text": "Footnotes\n\nIn the past I’ve had issues with getting pdf() to work, especially if I use any fancy fonts in the ggplot theme. If you run into issues, you can replace pdf() with cairo_pdf(..., onefile = TRUE), which seems to work even with exotic fonts.↩︎"
  },
  {
    "objectID": "posts/khroma/index.html",
    "href": "posts/khroma/index.html",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "",
    "text": "Setup/librarieslibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "hidden.html",
    "href": "hidden.html",
    "title": "Useful R Stuff",
    "section": "",
    "text": "This is a collection of R packages, bits of code, and other trivia that I find useful. It was originally written for myself, but hopefully others will find some useful tidbits.\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nCategories\n\n\nModified\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/khroma/index.html#khroma---colorblind-friendly-palettes",
    "href": "posts/khroma/index.html#khroma---colorblind-friendly-palettes",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "\nkhroma - colorblind-friendly palettes",
    "text": "khroma - colorblind-friendly palettes\nkhroma contains a number of color schemes that are colorblind-friendly, divided into diverging, qualitative, and sequential types:\n\nkhroma::info() |&gt;\n  group_by(type) |&gt;\n  summarize(palettes = paste(palette, collapse = \", \"))\n\n\n\n\n\n\n\n\ntype\npalettes\n\n\n\ndiverging\nbroc, cork, vik, lisbon, tofino, berlin, roma, bam, vanimo, oleron, bukavu, fes, sunset, BuRd, PRGn\n\n\nqualitative\nbright, highcontrast, vibrant, muted, mediumcontrast, pale, dark, light, okabeito, okabeitoblack, stratigraphy, soil, land\n\n\nsequential\ndevon, lajolla, bamako, davos, bilbao, nuuk, oslo, grayC, hawaii, lapaz, tokyo, buda, acton, turku, imola, batlow, batlowW, batlowK, brocO, corkO, vikO, romaO, bamO, YlOrBr, iridescent, discreterainbow, smoothrainbow\n\n\n\n\n\n\nThe color function takes a palette name and returns a function, which in turn returns a palette of specified size:\n\nlibrary(khroma)\n\nbright_fun &lt;- color(\"bright\")\nbright_fun(5)\n\n     blue       red     green    yellow      cyan \n\"#4477AA\" \"#EE6677\" \"#228833\" \"#CCBB44\" \"#66CCEE\" \nattr(,\"missing\")\n[1] NA\n\n\nAnd you can preview these palettes with plot_scheme():\n\nplot_scheme(bright_fun(7), names = TRUE,\n            colours = TRUE) # NB: `colours` must be spelled British-ly\n\n\n\n\nFurther, you can preview the palette as viewed by several types of colorblindness:\n\nplot_scheme_colorblind(bright_fun(7))\n\n\n\n\n\nEach of the schemes have built-in ggplot scales in the form scale_color_{palettename} and scale_fill_{palettename}:\n\nplot &lt;- midwest |&gt; \n  filter(percbelowpoverty &lt; 30) |&gt; \n  ggplot(aes(x = percollege, y = percbelowpoverty, color = state)) +\n    geom_point(size = 3, alpha =.5) +\n    scale_color_bright()\n\nplot\n\n\n\nPercent of population with a college degree vs. percent of population below the poverty line, by state. Data from ggplot2::midwest"
  },
  {
    "objectID": "posts/khroma/index.html#colorblindr---preview-your-plots-with-colorblind-simulation",
    "href": "posts/khroma/index.html#colorblindr---preview-your-plots-with-colorblind-simulation",
    "title": "\nkhroma and colorblindr: Tools for colorblind-friendly plots",
    "section": "\ncolorblindr - Preview your plots with colorblind simulation",
    "text": "colorblindr - Preview your plots with colorblind simulation\ncolorblindr::cvd_grid will simulate how your plots will look to people with various types of colorblindness. The midwest plot from above is shown here:\n\n# remotes::install_github(\"clauswilke/colorblindr\")\n\ncolorblindr::cvd_grid(plot)\n\n\n\n\n\n\nSession info and package versions\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n\n\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-04\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n\n─ Packages ───────────────────────────────────────────────────────────────────\n\n\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-01          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n       colorblindr         0.1.0 2023-07-05         Github\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n           cowplot         1.1.1 2020-12-30 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2023-06-29 CRAN (R 4.3.0)\n            khroma        1.10.0 2023-04-17 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              tzdb         0.4.0 2023-05-12 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.3 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)"
  }
]