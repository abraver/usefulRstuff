{
  "hash": "97e437508548418ca97f2d911d519bc8",
  "result": {
    "markdown": "---\ntitle: \"`janitor`: Clean dirty data, plus improved tables and crosstab\"\n\ndate: 6/25/23\n\ncategories:\n  - data cleaning\n\ntoc: true\n---\n\n\n\n\n\n\n\n\n\n\n<!-- begin content -->\n\n\n::: {.cell hash='index_cache/html/setup_bc5001da98b7296b9ceacbd9285ac791'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setup\"}\nlibrary(janitor)\n```\n:::\n\n\n\n[`janitor`](https://sfirke.github.io/janitor/index.html) contains various tools for examining and cleaning dirty data.\n\n\n## Cleaning dirty data\n\n### Clean column names\n\nLet's create a `df` with some poorly-chosen column names:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_30d372928b3f73125da2597151a23351'}\n\n```{.r .cell-code}\ntest_df <- as.data.frame(matrix(ncol = 6))\nnames(test_df) <- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n```\n:::\n\n\n`clean_names()` does just as the name implies:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_216e882d4f6a068d35e4a97ad855376e'}\n\n```{.r .cell-code}\ntest_df |> \n  clean_names()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|first_name |abc |percent_successful_2009 |repeat_value |repeat_value_2 |x  |\n|:----------|:---|:-----------------------|:------------|:--------------|:--|\n|NA         |NA  |NA                      |NA           |NA             |NA |\n\n</div>\n:::\n:::\n\n\n\nThe `case` argument to `clean_names()` specifies what case you'd like output names to be in.  You can specify any case style that's available in `snakecase::to_any_case()`, including \"screaming_snake\" if you want to be perverse:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_0476a974f2b13cd2107c026956699ed5'}\n\n```{.r .cell-code}\ntest_df |> \n  clean_names(case = \"screaming_snake\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|FIRST_NAME |ABC |PERCENT_SUCCESSFUL_2009 |REPEAT_VALUE |REPEAT_VALUE_2 |X  |\n|:----------|:---|:-----------------------|:------------|:--------------|:--|\n|NA         |NA  |NA                      |NA           |NA             |NA |\n\n</div>\n:::\n:::\n\n\n### Check if `df`s are row-bind-able\n\nAlso useful is `compare_df_cols` which summarizes whether the specified `df`s can be row-bound (i.e., have columns of the same names/types):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_4c37a288047afee4c788cb83c32de09c'}\n\n```{.r .cell-code}\ndf1 <- data.frame(A= 1:2, b = c(\"big\", \"small\"))\ndf2 <- data.frame(a = 10:12, b = c(\"medium\", \"small\", \"big\"), c = 0, stringsAsFactors = TRUE) # here, column b is a factor\ndf3 <- df1 |> \n  dplyr::mutate(b = as.character(b))\n\ncompare_df_cols(df1, df2, df3)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|column_name |df1       |df2     |df3       |\n|:-----------|:---------|:-------|:---------|\n|a           |NA        |integer |NA        |\n|A           |integer   |NA      |integer   |\n|b           |character |factor  |character |\n|c           |NA        |numeric |NA        |\n\n</div>\n:::\n:::\n\n\nIf you just want a simple `TRUE`/`FALSE` value telling you whether the `df`s match, you can use `compare_df_cols_same()`:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_bf392710a988fa766067b9ee165f4aff'}\n\n```{.r .cell-code}\nstr(compare_df_cols_same(df1, df2, df3, verbose = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi FALSE\n```\n:::\n:::\n\n\n\n\n## Examining data and crosstabs\n\n`janitor`'s version of tables are called `tabyls`.  You can easily generate crosstabs:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_52897fdb6a5b3c7b0a273a763154b6eb'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  tabyl(species, island)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species   | Biscoe| Dream| Torgersen|\n|:---------|------:|-----:|---------:|\n|Adelie    |     44|    56|        52|\n|Chinstrap |      0|    68|         0|\n|Gentoo    |    124|     0|         0|\n\n</div>\n:::\n:::\n\n\nThere are lots of ways to pretty up the output via `adorn_*` commands, giving things like column or row percentages, optionally with `n`s in parentheses:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_17b663b09b702842c27fa0ef8cae3858'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  tabyl(species, island) |> \n  adorn_totals(\"col\")  |> \n  adorn_percentages(\"row\")  |> \n  adorn_pct_formatting(digits = 2) |> \n  adorn_ns()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species   |Biscoe        |Dream        |Torgersen   |Total         |\n|:---------|:-------------|:------------|:-----------|:-------------|\n|Adelie    |28.95%  (44)  |36.84% (56)  |34.21% (52) |100.00% (152) |\n|Chinstrap |0.00%   (0)   |100.00% (68) |0.00%  (0)  |100.00%  (68) |\n|Gentoo    |100.00% (124) |0.00%  (0)   |0.00%  (0)  |100.00% (124) |\n\n</div>\n:::\n:::\n\nYou can also use the `adorn_*` functions on regular ol' `df`s:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_0f36ee2029ccf65aa7e1af92b5db09b2'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  dplyr::sample_n(10) |> # <1>\n  dplyr::select(-year) |> \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    |\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|\n|Adelie  |Dream     |           42.2|          18.5|               180|        3550|female |\n|Gentoo  |Biscoe    |           50.7|          15.0|               223|        5550|male   |\n|Adelie  |Torgersen |           33.5|          19.0|               190|        3600|female |\n|Adelie  |Biscoe    |           41.0|          20.0|               203|        4725|male   |\n|Adelie  |Torgersen |           42.5|          20.7|               197|        4500|male   |\n|Gentoo  |Biscoe    |           48.7|          15.7|               208|        5350|male   |\n|Adelie  |Torgersen |           46.0|          21.5|               194|        4200|male   |\n|Gentoo  |Biscoe    |           45.4|          14.6|               211|        4800|female |\n|Adelie  |Dream     |           36.3|          19.5|               190|        3800|male   |\n|Adelie  |Biscoe    |           36.5|          16.6|               181|        2850|female |\n|Total   |-         |          422.8|         181.1|              1977|       42925|-      |\n\n</div>\n:::\n:::\n\n1. Choose 10 random rows so this doesn't print forever\n\nCheck out the [`tabyl`s vignette](https://cran.r-project.org/web/packages/janitor/vignettes/tabyls.html) for more info.\n\n<!-- End content -->\n\n\n\n<details>\n<summary>Session info and package versions</summary>\n::: {.cell hash='index_cache/html/unnamed-chunk-11_1b544aa21e541faabc8f825df43eb4e8'}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-06\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Packages ───────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n           package loadedversion       date         source\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n           janitor         2.2.0 2023-02-02 CRAN (R 4.3.0)\n          jsonlite         1.8.7 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.22 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n         snakecase        0.11.0 2019-05-25 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)\n```\n:::\n:::\n</details>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/roboto-condensed-0.3.3/css/roboto-condensed.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}