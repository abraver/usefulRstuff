{
  "hash": "f0c821e31ab3ba41b6aa3ac8eaea566b",
  "result": {
    "markdown": "---\ntitle: \"Paginate a faceted graph and save as a single multi-page PDF\"\n\ndate: \"7/1/23\"\n\ncategories:\n  - visualization\n---\n<script src=\"/jquery-3.7.0.min.js\"></script>\n<script src=\"/fold.js\"></script>\n<script src=\"/move_session_info.js\"></script>\n\n\n\n\n\n\n\n\n\n\n\n<!-- begin content -->\n\n\n\n\n\nWhen you have a plot with just a few facets, it's easy to fit them all on a single page. But what if you have a whole bunch of facets that you want to visualize? For example, the `USArrests` dataset has data from all 50 US states.\n\nIf we just use the usual `facet_wrap` or `facet_grid` from `ggplot2`, you end up with one massive, smooshed-together image:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_52fccedd5623c1b3af8e4446d2e025eb'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nplot_1 <- USArrests |>  # dataset on US arrests\n  rownames_to_column(\"State\") |>   # This is just so we can see the state names\n  ggplot(aes(x = UrbanPop, y = Murder)) +\n  geom_point()  +\n  facet_wrap(~ State,\n             nrow = 5, ncol = 10)\n\nplot_1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe [`ggforce`](https://ggforce.data-imaginist.com) library, among its many useful functions, includes `facet_wrap_paginate` and `facet_grid_paginate`. These work like `facet_wrap` and `facet_grid`, but take an additional `page` argument. Here we specify that we want 4 rows and 5 columns per page, so for 50 states there will be 2 full pages plus one page with the remaining 10 states:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_d8421f0354f96113226db1d1dd04e278'}\n\n```{.r .cell-code}\nlibrary(ggforce)\n\nplot_2 <- plot_1  +\n  facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = 2)\n\nplot_2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNote that we had to specify which page we wanted to print. We can then easily put this into a loop to generate all the necessary pages. The helpful `n_pages()` will count the pages needed, which we can then use in a loop. This gives us 3 separate plots.\n\n\n\n\n::: {.cell .fold .o .g lightbox='{\"group\":\"these\"}' hash='index_cache/html/unnamed-chunk-6_cd188727526c8f5e7b9cb54296cabe60'}\n\n```{.r .cell-code}\nplot_pages <- plot_2 |> \n  n_pages()\n\nfor (i in 1:plot_pages) {\n  print(\n    plot_1 + facet_wrap_paginate(~ State,\n             nrow = 4, ncol = 5, page = i)\n  )  \n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\n<br>\n\nThat's better, but for inclusion in a longer document or for sharing the plot, you may want all three pages in a single PDF. This can be accomplished by calling `pdf()` before the loop and `dev.off()` after.^[In the past I've had issues with getting `pdf()` to work, especially if I use any fancy fonts in the ggplot theme.  If you run into issues, you can replace `pdf()` with `cairo_pdf(..., onefile = TRUE)`, which seems to work even with exotic fonts.]\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_3653771f1a0701bd9183eff1a4073de1'}\n\n```{.r .cell-code}\npdf('many_plots.pdf', width = 11, height = 8.5) #start building pdf\n  for (i in 1:plot_pages) {\n    print( # don't forget this\n      plot_1 +\n      facet_wrap_paginate(~State, nrow = 4, ncol = 5, page = i)\n    )\n  }\ndev.off() # end building pdf\n```\n:::\n\n\nThe [resulting PDF](many_plots.pdf) is a single file with 3 pages, as we expect.\n\n(This post was inspired by [this conversation on StackOverflow](https://stackoverflow.com/questions/48544039/how-to-save-output-from-ggforcefacet-grid-paginate-in-only-one-pdf).)\n\n<!-- End content -->\n\n\n\n<div id = \"footer-session-info\">\n<details>\n<summary>Session info and package versions</summary>\n::: {.cell hash='index_cache/html/unnamed-chunk-9_e9175bd67460e15c5615e5268fb63de0'}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Packages ───────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           forcats         1.0.0 2023-01-29 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggforce         0.4.1 2022-10-04 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n               hms         1.1.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2023-06-29 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n         lubridate         1.9.2 2023-02-10 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              MASS        7.3-60 2023-05-04 CRAN (R 4.3.1)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          polyclip        1.10-4 2022-10-20 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n             readr         2.1.4 2023-02-10 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-06-01 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n         tidyverse         2.0.0 2023-02-22 CRAN (R 4.3.0)\n        timechange         0.2.0 2023-01-11 CRAN (R 4.3.0)\n            tweenr         2.0.2 2022-09-06 CRAN (R 4.3.0)\n              tzdb         0.3.0 2023-05-12 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-06-14 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)\n```\n:::\n:::\n</details>\n</div>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/roboto-condensed-0.3.3/css/roboto-condensed.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}