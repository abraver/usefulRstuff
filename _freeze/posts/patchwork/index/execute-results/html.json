{
  "hash": "f9cdb5441e0b62522b2d1a16efcf1fb5",
  "result": {
    "markdown": "---\ntitle: \"Composing multiple plots with `patchwork`\"\n\ndate: \"7/7/23\"\n\ncategories:\n  - visualization\n\ntoc: true\n---\n<script src=\"/jquery-3.7.0.min.js\"></script>\n<script src=\"/fold.js\"></script>\n<script src=\"/move_session_info.js\"></script>\n\n\n\n\n\n\n\n\n\n\n\n<!-- begin content -->\n\n\n::: {.cell hash='index_cache/html/setup_cb31195c19eac84c71d9aa9101dafdf1'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setup\"}\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n## `patchwork`\n\nIt's often useful to compose multiple plots together into a single image. There are ways of doing this in base R, e.g., by using `par(mfrow=...)`, but i've always found this unintuitive and finicky. `patchwork` makes composing `ggplot`s simple, while allowing for a high degree of customization. ([The `patchwork` documentation](https://patchwork.data-imaginist.com) is very good, and this post will borrow liberally from it, but it's worth browsing for more details.)  (For those looking for an alternative to `patchwork`, check out `cowplot::plot_grid()`.)\n\nLet's start with 4 simple plots, and look at various ways of composing them. (These plots are nicely arranged in a grid by Quarto for the purposes of this page if your browser window is big enough, but note that they are each a separate image.)\n\n\n::: {.cell layout-ncol=\"2\" lightbox='{\"group\":\"boop\"}' hash='index_cache/html/unnamed-chunk-3_92c72a4e16d6b31a75d1d8348ae7e9cc'}\n\n```{.r .cell-code  code-fold=\"true\"}\np1 <- ggplot(palmerpenguins::penguins) +\n  geom_point(aes(bill_length_mm, bill_depth_mm,\n                 color = species)) +\n  ggtitle(\"Plot 1\")\n\np2 <- ggplot(palmerpenguins::penguins) +\n  geom_boxplot(aes(y = bill_length_mm, species,\n                 color = species)) +\n  ggtitle(\"Plot 2\")\n\np3 <- ggplot(palmerpenguins::penguins) +\n  geom_point(aes(bill_length_mm, body_mass_g,\n                 color = species)) +\n  ggtitle(\"Plot 3\")\n\n\np4 <- ggplot(palmerpenguins::penguins) +\n  geom_bar(aes(bill_length_mm, fill = species)) +\n  ggtitle(\"Plot 4\")\n\np1; p2; p3; p4\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-4.png){width=672}\n:::\n:::\n\n\nThe simplest operation provided by `patchwork` is the `+` operator. Adding two plots together with `+` glues them together into a single image, side by side. You can do this with as many plots as you like--it will try to give a nice grid if possible.  Note that all plots below are combined into a single image.\n\n::: panel-tabset\n#### Two plots\n\n\n::: {.cell fig.asp='0.5'}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n\n#### Four plots\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_517c6e6d78c6b0c66fe0845021695c84'}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 + p2 + p3 + p4\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\nYou can specify the number of rows or columns in your composed plot with `plot_layout(nrow=..., ncol=...)`. Setting `byrow` to false fills by column, rather than by row (so the left column below has plots 1, 2, and 3). (Click image to embiggen.)\n\n\n::: {.cell hash='index_cache/html/byrow_05b63ac03f57d43372c2b4847f85a4b1'}\n\n```{.r .cell-code}\np1 + p2 + p3 + p4 +\n  plot_layout(nrow = 3, byrow = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/byrow-1.png){width=100%}\n:::\n:::\n\n\nSee the section below on [more complicated layouts] and `?plot_layout` for more options.\n\n## Packing and stacking (the `|` and `/` operators)\n\nComposing two plots with the `|` operator works a lot like the `+` operator above, except it ensures that the plots will end up side-by-side (\"packed\") rather than one on top of the other. The `/` operator does the opposite---it ensures that plots are stacked.\"\n\n::: panel-tabset\n#### `p1 | p2`\n\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/unnamed-chunk-6_ecb26e188dd7450091e48f617e83624d'}\n\n```{.r .cell-code}\np1 | p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n\n#### `p1 / p2`\n\n\n::: {.cell fig.asp='1.5' hash='index_cache/html/unnamed-chunk-7_6f152f2ebcf2d06547bdde96507b542d'}\n\n```{.r .cell-code}\np1 / p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=50%}\n:::\n:::\n\n:::\n\nParentheses can help to disambiguate possible layouts. (All of the operators work essentially like their arithmetic counterparts with respect to parentheses.) Without parentheses, as in the first tab below, the `/` operator takes precedence over the `|` operator:\n\n::: panel-tabset\n#### `p1 / p2 | p3`\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_41b714f3ec722196210cf86e7d1ef3ab'}\n\n```{.r .cell-code}\np1 / p2 | p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n\n#### `p1 / (p2 | p3)`\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_397b193eeeb3cf38a70dcb65f0e2d330'}\n\n```{.r .cell-code}\np1 / (p2 | p3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=100%}\n:::\n:::\n\n:::\n\n## Annotating the composed plot\n\n`plot_annotation()` will annotate the combined, composed plot. The `title` and `subtitle`, arguments work as you would expect. The `tag_levels` argument lets you specify one of `c('a', 'A', '1', 'i', 'I')` for various sub-plot numbering:\n\n\n::: {.cell hash='index_cache/html/annotating_51f0e5e0ccb06344fb3048f2bdf50da1'}\n\n```{.r .cell-code}\n(p1 | (p2 / p3)) + \n  plot_annotation(title = 'Lots of data about penguins',\n    subtitle = 'There\\'s never too much info about penguins',\n    tag_levels = \"A\") &\n  theme(plot.title = element_text(hjust = .5, color = \"blue\"),\n        plot.tag = element_text(size = 20))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/annotating-1.png){width=100%}\n:::\n:::\n\n\n(The `&` operator applies the theme specification to all subplots within the composed plot (and overall things like the main title/subtitle); the `*` operator applies the theme specifications to all subplots in the current [nesting]. level.)\n\nIf you want a theme element to apply only to the overall plot, and not the subplots, use the `theme` argument to `plot_annotation()` rather than `& theme(...)`.\n\n\n::: {.cell hash='index_cache/html/theme_argument_f00fe4daf9a4d2ff6676afc69f7db47f'}\n\n```{.r .cell-code}\n(p1 | (p2 / p3)) + \n  plot_annotation(title = 'Lots of data about penguins',\n    subtitle = 'There\\'s never too much info about penguins', tag_levels = \"A\",\n    theme = theme(plot.title = element_text(hjust = .5, color = \"blue\"),\n        plot.tag = element_text(size = 20)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/theme_argument-1.png){width=100%}\n:::\n:::\n\n\n\n## More complicated layouts\n\nWe saw above that we can modify the layout with `plot_layout(ncol = ...)`.  You can also specify relative `widths` and `heights` for the rows and columns.  For example, you can provide `widths` with a vector of _n_ columns to specify each.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_c306e3a4cb0c5d9a4dce647a6ec90aa4'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Some plot theme changes for visibility in the following examples\"}\np1 <- p1 + theme(legend.position = \"none\", plot.background = element_rect(color = \"black\", linewidth = 2, fill = \"white\"))\np2 <- p2 + theme(legend.position = \"none\", plot.background = element_rect(color = \"blue\", linewidth = 2, fill = \"white\"))\np3 <- p3 + theme(legend.position = \"none\", plot.background = element_rect(color = \"green\", linewidth = 2, fill = \"white\"))\np4 <- p4 + theme(legend.position = \"none\", plot.background = element_rect(color = \"red\", linewidth = 2, fill = \"white\"))\n```\n:::\n\n::: {.cell hash='index_cache/html/widths_40d8ca9841e3f9ca1ae27e15a083dff2'}\n\n```{.r .cell-code}\np1 + p2 + p3 + p4 + \n  plot_layout(widths = c(3, 1), heights = c(2, 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/widths-1.png){width=75%}\n:::\n:::\n\n\nYou can also specify quite complicated layouts with `plot_layout(design = ...)`, in two formats.  The simplest is to use a textual representation, as below.  Letters represent plots (in the order in which they appear), with `#`s representing empty spaces.  You must specify a perfect rectangular shape.\n\n\n::: {.cell hash='index_cache/html/letter_design_1637f49d0bbb97acd203e009a7bec9f1'}\n\n```{.r .cell-code}\nlayout <- \"\n##BBBB\nAACCDD\n##CCDD\n\"\np1 + p2 + p3 + p4 + \n  plot_layout(design = layout)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/letter_design-1.png){width=75%}\n:::\n:::\n\n\nUsing `wrap_plots`, you can specify which plot is represented by which letter, rather than letting that be handled automatically:\n\n\n::: {.cell hash='index_cache/html/wrap_plots_5875dfc5c750f7863250bed79bc37ebe'}\n\n```{.r .cell-code}\nlayout <- '\nA#B\n#C#\nD#E\n'\nwrap_plots(D = p1, C = p2, B = p3, design = layout)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/wrap_plots-1.png){width=75%}\n:::\n:::\n\n\n\nThe alternative way to specify a layout is with one or more `area()`s, which take arguments for the `t`op, `l`eft, `b`ottom,  and `r`ight bounds of a grid.^[Somewhat annoyingly, the argument order here is `tlbr`, rather than `trbl` as in css, which is how my brain works.]  The grid is specified in rows and columns, with row 1 column 1 being the top left, and numbers increasing as you go down and right.  You can have plots overlap with this type of specification.\n\n\n\n::: {.cell hash='index_cache/html/area_a2f3b50761465ff266b78708e6893047'}\n\n```{.r .cell-code}\nlayout <- c(\n  area(t = 2, l = 1, b = 5, r = 4), # This will be p1\n  area(t = 1, l = 3, b = 3, r = 5) # this will be p2\n)\np1 + p2 + \n  plot_layout(design = layout)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/area-1.png){width=75%}\n:::\n:::\n\n\n### Insets\nIt's also possible to specify insets using `inset_element()`.  Here, the position arguments should be relative to 1, with (0, 0) being bottom left and (1, 1) being top right.  The `align_to` argument defaults to `panel`, but accepts values `plot` or `full` as well.\n\n\n::: {.cell hash='index_cache/html/inset_fc89adb30e37d71598c2f003cf7f0e8a'}\n\n```{.r .cell-code}\np1 + inset_element(p2, top = 1, right = 1, bottom = .5,\n                   left = .5, align_to = \"full\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/inset-1.png){width=75%}\n:::\n:::\n\n\n## Controlling legends\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_4952d7ca1b5c43836b4644e6d4ac30fc'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Reset plots to their original theme\"}\np1 <- p1 + theme(legend.position = \"right\", plot.background = element_blank())\np2 <- p2 + theme(legend.position = \"right\", plot.background = element_blank())\np3 <- p3 + theme(legend.position = \"right\", plot.background = element_blank())\np4 <- p4 + theme(legend.position = \"right\", plot.background = element_blank())\n```\n:::\n\n\n`plot_layout(guides = \"collect\")` will collect all of the legends and put them in the same location.  Legends that are identical between multiple subplots are collapsed, as with plots 1 and 3 below:\n\n:::{.panel-tabset}\n\n#### `guides` = \"collect\"\n\n::: {.cell hash='index_cache/html/collect_4834e1d868337837b957181223eb720f'}\n\n```{.r .cell-code}\np1 + p2 + p3 + p4 + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/collect-1.png){width=672}\n:::\n:::\n\n\n#### `guides` = \"keep\"\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_84e54800ac1bd2255babeeaa765312cc'}\n\n```{.r .cell-code}\np1 + p2 + p3 + p4 + plot_layout(guides = \"keep\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n\nYou can influence where the collected legends show up by including `guide_area()` in your layout specification:\n\n\n::: {.cell hash='index_cache/html/collect-area_162e1fe901609b6799a237e4ce6d6635'}\n\n```{.r .cell-code}\nguide_area() + p1 + p2 + p3 + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/collect-area-1.png){width=672}\n:::\n:::\n\n\n\n## Nesting\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_98bed90f96aa74c5d6227f71bc827c90'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Some plot theme changes for visibility in the following examples\"}\np1 <- p1 + theme(legend.position = \"none\", plot.background = element_rect(color = \"black\", linewidth = 2, fill = \"white\"))\np2 <- p2 + theme(legend.position = \"none\", plot.background = element_rect(color = \"blue\", linewidth = 2, fill = \"white\"))\np3 <- p3 + theme(legend.position = \"none\", plot.background = element_rect(color = \"green\", linewidth = 2, fill = \"white\"))\np4 <- p4 + theme(legend.position = \"none\", plot.background = element_rect(color = \"red\", linewidth = 2, fill = \"white\"))\n```\n:::\n\n\n\nPlots can be nested at multiple levels.  Compare the following plots: in the first we use `wrap_plots()` to combine `p1` and `p2` into a single unit (which is then added to plot 3); in the second we don't do any nesting.\n\n::: panel-tabset\n\n#### Nesting `p1` and `p2`\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/nesting_d23e9ffd8039d5b02e46fc02e0661b97'}\n\n```{.r .cell-code}\nwrap_plots(p1 + p2) + p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/nesting-1.png){width=100%}\n:::\n:::\n\n#### No nesting\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/no_nesting_4b2cadfa87a49c2ef74db78c1be224ec'}\n\n```{.r .cell-code}\n(p1 + p2) + p3 # Parens are vacuous here\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/no_nesting-1.png){width=100%}\n:::\n:::\n\n\n:::\n\nIf you don't use `wrap_plots()`, the nesting behavior with `+` is a little unintuitive.  With a single plot on the left of `+` and a composite plot on the right, you get the expected nesting, with the composite plot taking up *half* of the whole plot:\n\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/unnamed-chunk-14_9b36fb61ffd4f9845ad4819046d37700'}\n\n```{.r .cell-code}\ncomposite <- p1 + p2\np3 + composite\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=100%}\n:::\n:::\n\n\nSo far, so good.  But, what if we change the order of arguments around `+`?  All of a sudden, the plot is divided into 3 equal panels!\n\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/unnamed-chunk-15_fcba2d1b1f57e9c9febf7606f3ba5764'}\n\n```{.r .cell-code}\ncomposite + p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=100%}\n:::\n:::\n\n\nSo, `+` will nest a composite on the right, but will not nest a composite on the left.  You can force the reverse of this by using the `-` operator, which keeps its arguments at the same nesting level---but I personally find the `wrap_plots()` syntax more intuitive.\n\n::: panel-tabset\n\n#### `composite - p3`\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/unnamed-chunk-16_46e018c91dc22d4505f278831e996da5'}\n\n```{.r .cell-code}\ncomposite - p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n#### `p3 - composite`\n\n\n::: {.cell fig.asp='0.5' hash='index_cache/html/unnamed-chunk-17_0317240887e17ff21a001d01da33a8c9'}\n\n```{.r .cell-code}\np3 - composite\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=100%}\n:::\n:::\n\n\n:::\n\n## Alignment across multiple slides\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_a4c9c0e92abc4483d36adfc13f651ba1'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Some plot theme changes for visibility in the following examples\"}\np1 <- p1 + theme(legend.position = \"top\", plot.background = element_blank())\np2 <- p2 + theme(legend.position = \"right\", plot.background = element_blank())\np3 <- p3 + theme(legend.position = \"bottom\", plot.background = element_blank())\np4 <- p4 + theme(legend.position = \"left\", plot.background = element_blank())\n```\n:::\n\n\nWhen including plots in a slideshow, you often get an annoying jerking sensation as you move from one slide to the next:\n\n\n::: {.cell animation.hook='gifski' hash='index_cache/html/unnamed-chunk-19_0d69ac5c31d3aaff0ab1ba7d1a2a3b11'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-.gif){width=672}\n:::\n:::\n\nYou can generate aligned plots `align_patches`.  Notice here how the axis labels are aligned with each other across multiple slides.\n\n::: {.cell animation.hook='gifski' hash='index_cache/html/unnamed-chunk-20_287d0dfaf568f5e59247caac72d9c40c'}\n\n```{.r .cell-code}\nplots_aligned <- align_patches(p1, p2, p3, p4)\nfor (p in plots_aligned) {\n  plot(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-.gif){width=672}\n:::\n:::\n\nSee [the relevant documentation](https://patchwork.data-imaginist.com/articles/guides/multipage.html) for more details.\n\n<!-- End content -->\n\n\n\n<div id = \"footer-session-info\">\n<details>\n<summary>Session info and package versions</summary>\n::: {.cell hash='index_cache/html/unnamed-chunk-22_fb543f977d89c37cd242c024ad7be101'}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Packages ───────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n           package loadedversion       date         source\n          asbutils    0.0.0.9001 2023-07-06          local\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n        colorspace         2.1-0 2023-01-23 CRAN (R 4.3.0)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul         1.4.0 2023-05-17 CRAN (R 4.3.0)\n              curl         5.0.1 2023-06-07 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n         extrafont          0.19 2023-01-18 CRAN (R 4.3.0)\n       extrafontdb           1.0 2012-06-11 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n            farver         2.1.1 2022-07-06 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n           ggplot2         3.4.2 2023-04-03 CRAN (R 4.3.0)\n            gifski      1.12.0-1 2023-06-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n            gtable         0.3.3 2023-03-21 CRAN (R 4.3.0)\n        hrbrthemes         0.8.0 2020-03-06 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n          labeling         0.4.2 2020-10-20 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n           munsell         0.5.0 2018-06-12 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n         patchwork         1.1.2 2022-08-19 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n          Rttf2pt1        1.3.12 2023-01-22 CRAN (R 4.3.0)\n            scales         1.2.1 2022-08-20 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)\n```\n:::\n:::\n</details>\n</div>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/roboto-condensed-0.3.3/css/roboto-condensed.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}