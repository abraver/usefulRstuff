{
  "hash": "5ff3a2bdd349f6a5632d1a4c555f1bce",
  "result": {
    "markdown": "---\ntitle: \"Summary statistics for `df`s with `skimr`\"\n\ndate: \"6/26/23\"\n\ncategories:\n  - dataframes\n  - summarizing\n---\n<script src=\"/jquery-3.7.0.min.js\"></script>\n<script src=\"/fold.js\"></script>\n<script src=\"/move_session_info.js\"></script>\n\n\n\n\n\n\n\n\n\n\n\n<!-- begin content -->\n\n\n::: {.cell hash='index_cache/html/setup_668d215c957f387f8bc5bbdc3236a799'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setup\"}\nlibrary(dplyr)\n```\n:::\n\n\n\n[`skimr::skim()`](https://docs.ropensci.org/skimr/) provides handy summary statistics for `df`s and related objects, including little sparkline-style histograms right in the output.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_5e7697a29cb535fcf6edbae43be12029'}\n\n```{.r .cell-code}\nlibrary(skimr)\n\npalmerpenguins::penguins |> \n  skim()\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_b8c5321ba0da1f7afbae6c8c65f08ff6'}\n::: {.cell-output .cell-output-stdout}\n```\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n  numeric                  5                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean      sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46    32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97    13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1    172    190    197  \n4 body_mass_g               2         0.994 4202.  802.    2700   3550   4050  \n5 year                      0         1     2008.    0.818 2007   2007   2008  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n5 2009   2009   ▇▁▇▁▇\n```\n:::\n:::\n\n\n\nIt also handles grouped data nicely:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_65b37e679154a5729468d70c333e4342'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  group_by(species) |> \n  skim()\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_aedac71a0fd58d6ae7a4627363f365cc'}\n::: {.cell-output .cell-output-stdout}\n```\n── Data Summary ────────────────────────\n                           Values                      \nName                       group_by(palmerpenguins::...\nNumber of rows             344                         \nNumber of columns          8                           \n_______________________                                \nColumn type frequency:                                 \n  factor                   2                           \n  numeric                  5                           \n________________________                               \nGroup variables            species                     \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable species   n_missing complete_rate ordered n_unique\n1 island        Adelie            0         1     FALSE          3\n2 island        Chinstrap         0         1     FALSE          1\n3 island        Gentoo            0         1     FALSE          1\n4 sex           Adelie            6         0.961 FALSE          2\n5 sex           Chinstrap         0         1     FALSE          2\n6 sex           Gentoo            5         0.960 FALSE          2\n  top_counts               \n1 Dre: 56, Tor: 52, Bis: 44\n2 Dre: 68, Bis: 0, Tor: 0  \n3 Bis: 124, Dre: 0, Tor: 0 \n4 fem: 73, mal: 73         \n5 fem: 34, mal: 34         \n6 mal: 61, fem: 58         \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     species   n_missing complete_rate   mean      sd     p0\n 1 bill_length_mm    Adelie            1         0.993   38.8   2.66    32.1\n 2 bill_length_mm    Chinstrap         0         1       48.8   3.34    40.9\n 3 bill_length_mm    Gentoo            1         0.992   47.5   3.08    40.9\n 4 bill_depth_mm     Adelie            1         0.993   18.3   1.22    15.5\n 5 bill_depth_mm     Chinstrap         0         1       18.4   1.14    16.4\n 6 bill_depth_mm     Gentoo            1         0.992   15.0   0.981   13.1\n 7 flipper_length_mm Adelie            1         0.993  190.    6.54   172  \n 8 flipper_length_mm Chinstrap         0         1      196.    7.13   178  \n 9 flipper_length_mm Gentoo            1         0.992  217.    6.48   203  \n10 body_mass_g       Adelie            1         0.993 3701.  459.    2850  \n11 body_mass_g       Chinstrap         0         1     3733.  384.    2700  \n12 body_mass_g       Gentoo            1         0.992 5076.  504.    3950  \n13 year              Adelie            0         1     2008.    0.822 2007  \n14 year              Chinstrap         0         1     2008.    0.863 2007  \n15 year              Gentoo            0         1     2008.    0.792 2007  \n      p25    p50    p75   p100 hist \n 1   36.8   38.8   40.8   46   ▁▆▇▆▁\n 2   46.3   49.6   51.1   58   ▂▇▇▅▁\n 3   45.3   47.3   49.6   59.6 ▃▇▆▁▁\n 4   17.5   18.4   19     21.5 ▂▆▇▃▁\n 5   17.5   18.4   19.4   20.8 ▅▇▇▆▂\n 6   14.2   15     15.7   17.3 ▅▇▇▆▂\n 7  186    190    195    210   ▁▆▇▅▁\n 8  191    196    201    212   ▁▅▇▅▂\n 9  212    216    221    231   ▂▇▇▆▃\n10 3350   3700   4000   4775   ▅▇▇▃▂\n11 3488.  3700   3950   4800   ▁▅▇▃▁\n12 4700   5000   5500   6300   ▃▇▇▇▂\n13 2007   2008   2009   2009   ▇▁▇▁▇\n14 2007   2008   2009   2009   ▇▁▆▁▇\n15 2007   2008   2009   2009   ▆▁▇▁▇\n```\n:::\n:::\n\n\nAnd finally, since the output of `skim()` has class `data.frame`, you can include it in a pipeline, e.g. to filter by one of the summary statistics:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_e1bef466cf2932c3d1096b6eb254e0a2'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  skim() |> \n  filter(numeric.sd > 1)\n```\n:::\n\n::: {.cell .fold .o hash='index_cache/html/unnamed-chunk-7_3d55fc2f927181f7edd3f350d1472830'}\n::: {.cell-output .cell-output-stdout}\n```\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  numeric                  4                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable     n_missing complete_rate   mean     sd     p0    p25    p50\n1 bill_length_mm            2         0.994   43.9   5.46   32.1   39.2   44.4\n2 bill_depth_mm             2         0.994   17.2   1.97   13.1   15.6   17.3\n3 flipper_length_mm         2         0.994  201.   14.1   172    190    197  \n4 body_mass_g               2         0.994 4202.  802.   2700   3550   4050  \n     p75   p100 hist \n1   48.5   59.6 ▃▇▇▆▁\n2   18.7   21.5 ▅▅▇▇▂\n3  213    231   ▂▇▃▅▂\n4 4750   6300   ▃▇▆▃▂\n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_56d73a9cf26d2497dcc3aadc6d6648b9'}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n  skim() |> \n  filter(factor.n_unique > 1)\n```\n:::\n\n::: {.cell .fold .o hash='index_cache/html/unnamed-chunk-9_6e20e48d84dd47aaea8a78507cf02945'}\n::: {.cell-output .cell-output-stdout}\n```\n── Data Summary ────────────────────────\n                           Values                  \nName                       palmerpenguins::penguins\nNumber of rows             344                     \nNumber of columns          8                       \n_______________________                            \nColumn type frequency:                             \n  factor                   3                       \n________________________                           \nGroup variables            None                    \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 species               0         1     FALSE          3\n2 island                0         1     FALSE          3\n3 sex                  11         0.968 FALSE          2\n  top_counts                 \n1 Ade: 152, Gen: 124, Chi: 68\n2 Bis: 168, Dre: 124, Tor: 52\n3 mal: 168, fem: 165         \n```\n:::\n:::\n\n\n<br>\n\nTo refer to the summary statistic columns, be sure to preface the column name with the variable type, e.g. `factor.` or `numeric.` as appropriate.  For a list of variable types and the default summary statistics for each:\n\n\n::: {.cell .o .fold hash='index_cache/html/unnamed-chunk-10_2295d76350c609d2ce9a97acba07961f'}\n\n```{.r .cell-code}\nget_default_skimmer_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$AsIs\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$character\n[1] \"min\"        \"max\"        \"empty\"      \"n_unique\"   \"whitespace\"\n\n$complex\n[1] \"mean\"\n\n$Date\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$difftime\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$factor\n[1] \"ordered\"    \"n_unique\"   \"top_counts\"\n\n$haven_labelled\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$list\n[1] \"n_unique\"   \"min_length\" \"max_length\"\n\n$logical\n[1] \"mean\"  \"count\"\n\n$numeric\n[1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\"\n\n$POSIXct\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$Timespan\n[1] \"min\"      \"max\"      \"median\"   \"n_unique\"\n\n$ts\n [1] \"start\"      \"end\"        \"frequency\"  \"deltat\"     \"mean\"      \n [6] \"sd\"         \"min\"        \"max\"        \"median\"     \"line_graph\"\n```\n:::\n:::\n\n\n\nFinally, if you want to print the summary,  but return the original `df`, use `skim_tee()`.\n\n<!-- End content -->\n\n\n<div id = \"footer-session-info\">\n<details>\n<summary>Session info and package versions</summary>\n::: {.cell hash='index_cache/html/unnamed-chunk-12_c93db6b99817bdd368eabe3043b3795c'}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-07-08\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Packages ───────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n           package loadedversion       date         source\n         base64enc         0.1-3 2015-07-28 CRAN (R 4.3.0)\n               cli         3.6.1 2023-03-23 CRAN (R 4.3.0)\n         codetools        0.2-19 2023-02-01 CRAN (R 4.3.1)\n            crayon         1.5.2 2022-09-29 CRAN (R 4.3.0)\n              crul           1.3 2022-09-03 CRAN (R 4.3.1)\n              curl         5.0.0 2023-01-12 CRAN (R 4.3.0)\n            digest        0.6.31 2022-12-11 CRAN (R 4.3.0)\n             dplyr         1.1.2 2023-04-20 CRAN (R 4.3.0)\n          ellipsis         0.3.2 2021-04-29 CRAN (R 4.3.0)\n          evaluate          0.21 2023-05-05 CRAN (R 4.3.0)\n             fansi         1.0.4 2023-01-22 CRAN (R 4.3.0)\n           fastmap         1.1.1 2023-02-24 CRAN (R 4.3.0)\n fontBitstreamVera         0.1.1 2017-02-01 CRAN (R 4.3.0)\n    fontLiberation         0.1.0 2016-10-15 CRAN (R 4.3.0)\n        fontquiver         0.2.1 2017-02-01 CRAN (R 4.3.0)\n           gdtools         0.3.3 2023-03-27 CRAN (R 4.3.0)\n          generics         0.1.3 2022-07-05 CRAN (R 4.3.0)\n            gfonts         0.2.0 2023-01-08 CRAN (R 4.3.0)\n              glue         1.6.2 2022-02-24 CRAN (R 4.3.0)\n         htmltools         0.5.5 2023-03-23 CRAN (R 4.3.0)\n       htmlwidgets         1.6.2 2023-03-17 CRAN (R 4.3.0)\n          httpcode         0.3.0 2020-04-10 CRAN (R 4.3.0)\n            httpuv        1.6.11 2023-05-11 CRAN (R 4.3.0)\n          jsonlite         1.8.4 2022-12-06 CRAN (R 4.3.0)\n             knitr          1.43 2023-05-25 CRAN (R 4.3.0)\n             later         1.3.1 2023-05-02 CRAN (R 4.3.0)\n         lifecycle         1.0.3 2022-10-07 CRAN (R 4.3.0)\n          magrittr         2.0.3 2022-03-30 CRAN (R 4.3.0)\n              mime          0.12 2021-09-28 CRAN (R 4.3.0)\n    palmerpenguins         0.1.1 2022-08-15 CRAN (R 4.3.0)\n            pillar         1.9.0 2023-03-22 CRAN (R 4.3.0)\n         pkgconfig         2.0.3 2019-09-22 CRAN (R 4.3.0)\n          promises       1.2.0.1 2021-02-11 CRAN (R 4.3.0)\n             purrr         1.0.1 2023-01-10 CRAN (R 4.3.0)\n                R6         2.5.1 2021-08-19 CRAN (R 4.3.0)\n              ragg         1.2.5 2023-01-12 CRAN (R 4.3.0)\n              Rcpp        1.0.10 2023-01-22 CRAN (R 4.3.0)\n              renv        0.17.3 2023-04-06 CRAN (R 4.3.0)\n              repr         1.1.6 2023-01-26 CRAN (R 4.3.0)\n             rlang         1.1.1 2023-04-28 CRAN (R 4.3.0)\n         rmarkdown          2.21 2023-03-26 CRAN (R 4.3.0)\n        rstudioapi          0.14 2022-08-22 CRAN (R 4.3.0)\n       sessioninfo         1.2.2 2021-12-06 CRAN (R 4.3.0)\n             shiny         1.7.4 2022-12-15 CRAN (R 4.3.0)\n             skimr         2.1.5 2022-12-23 CRAN (R 4.3.0)\n           stringi        1.7.12 2023-01-11 CRAN (R 4.3.0)\n           stringr         1.5.0 2022-12-02 CRAN (R 4.3.0)\n       systemfonts         1.0.4 2022-02-11 CRAN (R 4.3.0)\n       textshaping         0.3.6 2021-10-13 CRAN (R 4.3.0)\n            tibble         3.2.1 2023-03-20 CRAN (R 4.3.0)\n             tidyr         1.3.0 2023-01-24 CRAN (R 4.3.0)\n        tidyselect         1.2.0 2022-10-10 CRAN (R 4.3.0)\n              utf8         1.2.3 2023-01-31 CRAN (R 4.3.0)\n             vctrs         0.6.2 2023-04-19 CRAN (R 4.3.0)\n             withr         2.5.0 2022-03-03 CRAN (R 4.3.0)\n              xfun          0.39 2023-04-20 CRAN (R 4.3.0)\n            xtable         1.8-4 2019-04-21 CRAN (R 4.3.0)\n              yaml         2.3.7 2023-01-23 CRAN (R 4.3.0)\n```\n:::\n:::\n</details>\n</div>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/roboto-condensed-0.3.3/css/roboto-condensed.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}