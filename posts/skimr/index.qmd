---
title: "Summary statistics for `df`s with `skimr`"

date: "6/26/23"

categories:
  - dataframes
  - summarizing
---

{{< include /_include_header.qmd >}}

<!-- begin content -->

```{r setup}
#| code-fold: true
#| code-summary: "Setup"
#| output: false
#| warning: false

library(dplyr)
```


[`skimr::skim()`](https://docs.ropensci.org/skimr/) provides handy summary statistics for `df`s and related objects, including little sparkline-style histograms right in the output.

```{r}
#| output: false
library(skimr)

palmerpenguins::penguins |> 
  skim()
```

```{r}
#| echo: false
library(skimr)

palmerpenguins::penguins |> 
  skim() |> 
  print()
```


It also handles grouped data nicely:

```{r}
#| output: false
palmerpenguins::penguins |> 
  group_by(species) |> 
  skim()
```
```{r}
#| echo: false
palmerpenguins::penguins |> 
  group_by(species) |> 
  skim() |> 
  print()
```

And finally, since the output of `skim()` has class `data.frame`, you can include it in a pipeline, e.g. to filter by one of the summary statistics:

```{r}
#| output: false
palmerpenguins::penguins |> 
  skim() |> 
  filter(numeric.sd > 1)
```

```{r}
#| echo: false
#| classes: .fold .o
palmerpenguins::penguins |> 
  skim() |> 
  filter(numeric.sd > 1) |> 
  print()
```


```{r}
#| output: false
palmerpenguins::penguins |> 
  skim() |> 
  filter(factor.n_unique > 1)
```

```{r}
#| echo: false
#| classes: .fold .o
palmerpenguins::penguins |> 
  skim() |> 
  filter(factor.n_unique > 1) |> 
  print()
```

<br>

To refer to the summary statistic columns, be sure to preface the column name with the variable type, e.g. `factor.` or `numeric.` as appropriate.  For a list of variable types and the default summary statistics for each:

```{r}
#| classes: .o .fold

get_default_skimmer_names()
```


Finally, if you want to print the summary,  but return the original `df`, use `skim_tee()`.

<!-- End content -->
{{< include /_include_footer.qmd >}}

